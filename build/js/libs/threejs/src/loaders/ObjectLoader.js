THREE.ObjectLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager};THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(e,t){var i=this;var r=new THREE.XHRLoader(i.manager);r.setCrossOrigin(this.crossOrigin);r.load(e,function(e){t(i.parse(JSON.parse(e)))})},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e){var t=this.parseGeometries(e.geometries);var i=this.parseMaterials(e.materials);var r=this.parseObject(e.object,t,i);return r},parseGeometries:function(e){var t={};if(void 0!==e){var i=new THREE.JSONLoader;for(var r=0,a=e.length;a>r;r++){var o;var n=e[r];switch(n.type){case"PlaneGeometry":o=new THREE.PlaneGeometry(n.width,n.height,n.widthSegments,n.heightSegments);break;case"CubeGeometry":o=new THREE.CubeGeometry(n.width,n.height,n.depth,n.widthSegments,n.heightSegments,n.depthSegments);break;case"CylinderGeometry":o=new THREE.CylinderGeometry(n.radiusTop,n.radiusBottom,n.height,n.radiusSegments,n.heightSegments,n.openEnded);break;case"SphereGeometry":o=new THREE.SphereGeometry(n.radius,n.widthSegments,n.heightSegments,n.phiStart,n.phiLength,n.thetaStart,n.thetaLength);break;case"IcosahedronGeometry":o=new THREE.IcosahedronGeometry(n.radius,n.detail);break;case"TorusGeometry":o=new THREE.TorusGeometry(n.radius,n.tube,n.radialSegments,n.tubularSegments,n.arc);break;case"TorusKnotGeometry":o=new THREE.TorusKnotGeometry(n.radius,n.tube,n.radialSegments,n.tubularSegments,n.p,n.q,n.heightScale);break;case"Geometry":o=i.parse(n.data).geometry}o.uuid=n.uuid;if(void 0!==n.name)o.name=n.name;t[n.uuid]=o}}return t},parseMaterials:function(e){var t={};if(void 0!==e){var i=new THREE.MaterialLoader;for(var r=0,a=e.length;a>r;r++){var o=e[r];var n=i.parse(o);n.uuid=o.uuid;if(void 0!==o.name)n.name=o.name;t[o.uuid]=n}}return t},parseObject:function(){var e=new THREE.Matrix4;return function(t,i,r){var a;switch(t.type){case"Scene":a=new THREE.Scene;break;case"PerspectiveCamera":a=new THREE.PerspectiveCamera(t.fov,t.aspect,t.near,t.far);break;case"OrthographicCamera":a=new THREE.OrthographicCamera(t.left,t.right,t.top,t.bottom,t.near,t.far);break;case"AmbientLight":a=new THREE.AmbientLight(t.color);break;case"DirectionalLight":a=new THREE.DirectionalLight(t.color,t.intensity);break;case"PointLight":a=new THREE.PointLight(t.color,t.intensity,t.distance);break;case"SpotLight":a=new THREE.SpotLight(t.color,t.intensity,t.distance,t.angle,t.exponent);break;case"HemisphereLight":a=new THREE.HemisphereLight(t.color,t.groundColor,t.intensity);break;case"Mesh":var o=i[t.geometry];var n=r[t.material];if(void 0===o)console.error("THREE.ObjectLoader: Undefined geometry "+t.geometry);if(void 0===n)console.error("THREE.ObjectLoader: Undefined material "+t.material);a=new THREE.Mesh(o,n);break;default:a=new THREE.Object3D}a.uuid=t.uuid;if(void 0!==t.name)a.name=t.name;if(void 0!==t.matrix){e.fromArray(t.matrix);e.decompose(a.position,a.quaternion,a.scale)}else{if(void 0!==t.position)a.position.fromArray(t.position);if(void 0!==t.rotation)a.rotation.fromArray(t.rotation);if(void 0!==t.scale)a.scale.fromArray(t.scale)}if(void 0!==t.visible)a.visible=t.visible;if(void 0!==t.userData)a.userData=t.userData;if(void 0!==t.children)for(var s in t.children)a.add(this.parseObject(t.children[s],i,r));return a}}()};