THREE.ObjectLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.ObjectLoader.prototype={constructor:THREE.ObjectLoader,load:function(e,t){var i=this,r=new THREE.XHRLoader(i.manager);r.setCrossOrigin(this.crossOrigin),r.load(e,function(e){t(i.parse(JSON.parse(e)))})},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e){var t=this.parseGeometries(e.geometries),i=this.parseMaterials(e.materials),r=this.parseObject(e.object,t,i);return r},parseGeometries:function(e){var t={};if(void 0!==e)for(var i=new THREE.JSONLoader,r=0,o=e.length;o>r;r++){var n,a=e[r];switch(a.type){case"PlaneGeometry":n=new THREE.PlaneGeometry(a.width,a.height,a.widthSegments,a.heightSegments);break;case"CubeGeometry":n=new THREE.CubeGeometry(a.width,a.height,a.depth,a.widthSegments,a.heightSegments,a.depthSegments);break;case"CylinderGeometry":n=new THREE.CylinderGeometry(a.radiusTop,a.radiusBottom,a.height,a.radiusSegments,a.heightSegments,a.openEnded);break;case"SphereGeometry":n=new THREE.SphereGeometry(a.radius,a.widthSegments,a.heightSegments,a.phiStart,a.phiLength,a.thetaStart,a.thetaLength);break;case"IcosahedronGeometry":n=new THREE.IcosahedronGeometry(a.radius,a.detail);break;case"TorusGeometry":n=new THREE.TorusGeometry(a.radius,a.tube,a.radialSegments,a.tubularSegments,a.arc);break;case"TorusKnotGeometry":n=new THREE.TorusKnotGeometry(a.radius,a.tube,a.radialSegments,a.tubularSegments,a.p,a.q,a.heightScale);break;case"Geometry":n=i.parse(a.data).geometry}n.uuid=a.uuid,void 0!==a.name&&(n.name=a.name),t[a.uuid]=n}return t},parseMaterials:function(e){var t={};if(void 0!==e)for(var i=new THREE.MaterialLoader,r=0,o=e.length;o>r;r++){var n=e[r],a=i.parse(n);a.uuid=n.uuid,void 0!==n.name&&(a.name=n.name),t[n.uuid]=a}return t},parseObject:function(){var e=new THREE.Matrix4;return function(t,i,r){var o;switch(t.type){case"Scene":o=new THREE.Scene;break;case"PerspectiveCamera":o=new THREE.PerspectiveCamera(t.fov,t.aspect,t.near,t.far);break;case"OrthographicCamera":o=new THREE.OrthographicCamera(t.left,t.right,t.top,t.bottom,t.near,t.far);break;case"AmbientLight":o=new THREE.AmbientLight(t.color);break;case"DirectionalLight":o=new THREE.DirectionalLight(t.color,t.intensity);break;case"PointLight":o=new THREE.PointLight(t.color,t.intensity,t.distance);break;case"SpotLight":o=new THREE.SpotLight(t.color,t.intensity,t.distance,t.angle,t.exponent);break;case"HemisphereLight":o=new THREE.HemisphereLight(t.color,t.groundColor,t.intensity);break;case"Mesh":var n=i[t.geometry],a=r[t.material];void 0===n&&console.error("THREE.ObjectLoader: Undefined geometry "+t.geometry),void 0===a&&console.error("THREE.ObjectLoader: Undefined material "+t.material),o=new THREE.Mesh(n,a);break;default:o=new THREE.Object3D}if(o.uuid=t.uuid,void 0!==t.name&&(o.name=t.name),void 0!==t.matrix?(e.fromArray(t.matrix),e.decompose(o.position,o.quaternion,o.scale)):(void 0!==t.position&&o.position.fromArray(t.position),void 0!==t.rotation&&o.rotation.fromArray(t.rotation),void 0!==t.scale&&o.scale.fromArray(t.scale)),void 0!==t.visible&&(o.visible=t.visible),void 0!==t.userData&&(o.userData=t.userData),void 0!==t.children)for(var s in t.children)o.add(this.parseObject(t.children[s],i,r));return o}}()};