THREE.Loader=function(e){this.showStatus=e;this.statusDomElement=e?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"anonymous",addStatusElement:function(){var e=document.createElement("div");e.style.position="absolute";e.style.right="0px";e.style.top="0px";e.style.fontSize="0.8em";e.style.textAlign="left";e.style.background="rgba(0,0,0,0.25)";e.style.color="#fff";e.style.width="120px";e.style.padding="0.5em 0.5em 0.5em 0.5em";e.style.zIndex=1e3;e.innerHTML="Loading ...";return e},updateProgress:function(e){var t="Loaded ";if(e.total)t+=(100*e.loaded/e.total).toFixed(0)+"%";else t+=(e.loaded/1e3).toFixed(2)+" KB";this.statusDomElement.innerHTML=t},extractUrlBase:function(e){var t=e.split("/");t.pop();return(t.length<1?".":t.join("/"))+"/"},initMaterials:function(e,t){var i=[];for(var r=0;r<e.length;++r)i[r]=THREE.Loader.prototype.createMaterial(e[r],t);return i},needsTangents:function(e){for(var t=0,i=e.length;i>t;t++){var r=e[t];if(r instanceof THREE.ShaderMaterial)return!0}return!1},createMaterial:function(e,t){function i(e){var t=Math.log(e)/Math.LN2;return Math.floor(t)==t}function r(e){var t=Math.log(e)/Math.LN2;return Math.pow(2,Math.round(t))}function a(e,t){var a=new Image;a.onload=function(){if(!i(this.width)||!i(this.height)){var t=r(this.width);var a=r(this.height);e.image.width=t;e.image.height=a;e.image.getContext("2d").drawImage(this,0,0,t,a)}else e.image=this;e.needsUpdate=!0};a.crossOrigin=s.crossOrigin;a.src=t}function o(e,i,r,o,n,s,l){var c=/\.dds$/i.test(r);var h=t+"/"+r;if(c){var u=THREE.ImageUtils.loadCompressedTexture(h);e[i]=u}else{var u=document.createElement("canvas");e[i]=new THREE.Texture(u)}e[i].sourceFile=r;if(o){e[i].repeat.set(o[0],o[1]);if(1!==o[0])e[i].wrapS=THREE.RepeatWrapping;if(1!==o[1])e[i].wrapT=THREE.RepeatWrapping}if(n)e[i].offset.set(n[0],n[1]);if(s){var f={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping};if(void 0!==f[s[0]])e[i].wrapS=f[s[0]];if(void 0!==f[s[1]])e[i].wrapT=f[s[1]]}if(l)e[i].anisotropy=l;if(!c)a(e[i],h)}function n(e){return(255*e[0]<<16)+(255*e[1]<<8)+255*e[2]}var s=this;var l="MeshLambertMaterial";var c={color:15658734,opacity:1,map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(e.shading){var h=e.shading.toLowerCase();if("phong"===h)l="MeshPhongMaterial";else if("basic"===h)l="MeshBasicMaterial"}if(void 0!==e.blending&&void 0!==THREE[e.blending])c.blending=THREE[e.blending];if(void 0!==e.transparent||e.opacity<1)c.transparent=e.transparent;if(void 0!==e.depthTest)c.depthTest=e.depthTest;if(void 0!==e.depthWrite)c.depthWrite=e.depthWrite;if(void 0!==e.visible)c.visible=e.visible;if(void 0!==e.flipSided)c.side=THREE.BackSide;if(void 0!==e.doubleSided)c.side=THREE.DoubleSide;if(void 0!==e.wireframe)c.wireframe=e.wireframe;if(void 0!==e.vertexColors)if("face"===e.vertexColors)c.vertexColors=THREE.FaceColors;else if(e.vertexColors)c.vertexColors=THREE.VertexColors;if(e.colorDiffuse)c.color=n(e.colorDiffuse);else if(e.DbgColor)c.color=e.DbgColor;if(e.colorSpecular)c.specular=n(e.colorSpecular);if(e.colorAmbient)c.ambient=n(e.colorAmbient);if(e.transparency)c.opacity=e.transparency;if(e.specularCoef)c.shininess=e.specularCoef;if(e.mapDiffuse&&t)o(c,"map",e.mapDiffuse,e.mapDiffuseRepeat,e.mapDiffuseOffset,e.mapDiffuseWrap,e.mapDiffuseAnisotropy);if(e.mapLight&&t)o(c,"lightMap",e.mapLight,e.mapLightRepeat,e.mapLightOffset,e.mapLightWrap,e.mapLightAnisotropy);if(e.mapBump&&t)o(c,"bumpMap",e.mapBump,e.mapBumpRepeat,e.mapBumpOffset,e.mapBumpWrap,e.mapBumpAnisotropy);if(e.mapNormal&&t)o(c,"normalMap",e.mapNormal,e.mapNormalRepeat,e.mapNormalOffset,e.mapNormalWrap,e.mapNormalAnisotropy);if(e.mapSpecular&&t)o(c,"specularMap",e.mapSpecular,e.mapSpecularRepeat,e.mapSpecularOffset,e.mapSpecularWrap,e.mapSpecularAnisotropy);if(e.mapBumpScale)c.bumpScale=e.mapBumpScale;if(e.mapNormal){var u=THREE.ShaderLib["normalmap"];var f=THREE.UniformsUtils.clone(u.uniforms);f["tNormal"].value=c.normalMap;if(e.mapNormalFactor)f["uNormalScale"].value.set(e.mapNormalFactor,e.mapNormalFactor);if(c.map){f["tDiffuse"].value=c.map;f["enableDiffuse"].value=!0}if(c.specularMap){f["tSpecular"].value=c.specularMap;f["enableSpecular"].value=!0}if(c.lightMap){f["tAO"].value=c.lightMap;f["enableAO"].value=!0}f["uDiffuseColor"].value.setHex(c.color);f["uSpecularColor"].value.setHex(c.specular);f["uAmbientColor"].value.setHex(c.ambient);f["uShininess"].value=c.shininess;if(void 0!==c.opacity)f["uOpacity"].value=c.opacity;var d={fragmentShader:u.fragmentShader,vertexShader:u.vertexShader,uniforms:f,lights:!0,fog:!0};var p=new THREE.ShaderMaterial(d);if(c.transparent)p.transparent=!0}else var p=new THREE[l](c);if(void 0!==e.DbgName)p.name=e.DbgName;return p}};