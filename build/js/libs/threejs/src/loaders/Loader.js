THREE.Loader=function(e){this.showStatus=e,this.statusDomElement=e?THREE.Loader.prototype.addStatusElement():null,this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}},THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"anonymous",addStatusElement:function(){var e=document.createElement("div");return e.style.position="absolute",e.style.right="0px",e.style.top="0px",e.style.fontSize="0.8em",e.style.textAlign="left",e.style.background="rgba(0,0,0,0.25)",e.style.color="#fff",e.style.width="120px",e.style.padding="0.5em 0.5em 0.5em 0.5em",e.style.zIndex=1e3,e.innerHTML="Loading ...",e},updateProgress:function(e){var t="Loaded ";t+=e.total?(100*e.loaded/e.total).toFixed(0)+"%":(e.loaded/1e3).toFixed(2)+" KB",this.statusDomElement.innerHTML=t},extractUrlBase:function(e){var t=e.split("/");return t.pop(),(t.length<1?".":t.join("/"))+"/"},initMaterials:function(e,t){for(var i=[],r=0;r<e.length;++r)i[r]=THREE.Loader.prototype.createMaterial(e[r],t);return i},needsTangents:function(e){for(var t=0,i=e.length;i>t;t++){var r=e[t];if(r instanceof THREE.ShaderMaterial)return!0}return!1},createMaterial:function(e,t){function i(e){var t=Math.log(e)/Math.LN2;return Math.floor(t)==t}function r(e){var t=Math.log(e)/Math.LN2;return Math.pow(2,Math.round(t))}function o(e,t){var o=new Image;o.onload=function(){if(i(this.width)&&i(this.height))e.image=this;else{var t=r(this.width),o=r(this.height);e.image.width=t,e.image.height=o,e.image.getContext("2d").drawImage(this,0,0,t,o)}e.needsUpdate=!0},o.crossOrigin=s.crossOrigin,o.src=t}function n(e,i,r,n,a,s,l){var c=/\.dds$/i.test(r),h=t+"/"+r;if(c){var u=THREE.ImageUtils.loadCompressedTexture(h);e[i]=u}else{var u=document.createElement("canvas");e[i]=new THREE.Texture(u)}if(e[i].sourceFile=r,n&&(e[i].repeat.set(n[0],n[1]),1!==n[0]&&(e[i].wrapS=THREE.RepeatWrapping),1!==n[1]&&(e[i].wrapT=THREE.RepeatWrapping)),a&&e[i].offset.set(a[0],a[1]),s){var d={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping};void 0!==d[s[0]]&&(e[i].wrapS=d[s[0]]),void 0!==d[s[1]]&&(e[i].wrapT=d[s[1]])}l&&(e[i].anisotropy=l),c||o(e[i],h)}function a(e){return(255*e[0]<<16)+(255*e[1]<<8)+255*e[2]}var s=this,l="MeshLambertMaterial",c={color:15658734,opacity:1,map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(e.shading){var h=e.shading.toLowerCase();"phong"===h?l="MeshPhongMaterial":"basic"===h&&(l="MeshBasicMaterial")}if(void 0!==e.blending&&void 0!==THREE[e.blending]&&(c.blending=THREE[e.blending]),(void 0!==e.transparent||e.opacity<1)&&(c.transparent=e.transparent),void 0!==e.depthTest&&(c.depthTest=e.depthTest),void 0!==e.depthWrite&&(c.depthWrite=e.depthWrite),void 0!==e.visible&&(c.visible=e.visible),void 0!==e.flipSided&&(c.side=THREE.BackSide),void 0!==e.doubleSided&&(c.side=THREE.DoubleSide),void 0!==e.wireframe&&(c.wireframe=e.wireframe),void 0!==e.vertexColors&&("face"===e.vertexColors?c.vertexColors=THREE.FaceColors:e.vertexColors&&(c.vertexColors=THREE.VertexColors)),e.colorDiffuse?c.color=a(e.colorDiffuse):e.DbgColor&&(c.color=e.DbgColor),e.colorSpecular&&(c.specular=a(e.colorSpecular)),e.colorAmbient&&(c.ambient=a(e.colorAmbient)),e.transparency&&(c.opacity=e.transparency),e.specularCoef&&(c.shininess=e.specularCoef),e.mapDiffuse&&t&&n(c,"map",e.mapDiffuse,e.mapDiffuseRepeat,e.mapDiffuseOffset,e.mapDiffuseWrap,e.mapDiffuseAnisotropy),e.mapLight&&t&&n(c,"lightMap",e.mapLight,e.mapLightRepeat,e.mapLightOffset,e.mapLightWrap,e.mapLightAnisotropy),e.mapBump&&t&&n(c,"bumpMap",e.mapBump,e.mapBumpRepeat,e.mapBumpOffset,e.mapBumpWrap,e.mapBumpAnisotropy),e.mapNormal&&t&&n(c,"normalMap",e.mapNormal,e.mapNormalRepeat,e.mapNormalOffset,e.mapNormalWrap,e.mapNormalAnisotropy),e.mapSpecular&&t&&n(c,"specularMap",e.mapSpecular,e.mapSpecularRepeat,e.mapSpecularOffset,e.mapSpecularWrap,e.mapSpecularAnisotropy),e.mapBumpScale&&(c.bumpScale=e.mapBumpScale),e.mapNormal){var u=THREE.ShaderLib.normalmap,d=THREE.UniformsUtils.clone(u.uniforms);d.tNormal.value=c.normalMap,e.mapNormalFactor&&d.uNormalScale.value.set(e.mapNormalFactor,e.mapNormalFactor),c.map&&(d.tDiffuse.value=c.map,d.enableDiffuse.value=!0),c.specularMap&&(d.tSpecular.value=c.specularMap,d.enableSpecular.value=!0),c.lightMap&&(d.tAO.value=c.lightMap,d.enableAO.value=!0),d.uDiffuseColor.value.setHex(c.color),d.uSpecularColor.value.setHex(c.specular),d.uAmbientColor.value.setHex(c.ambient),d.uShininess.value=c.shininess,void 0!==c.opacity&&(d.uOpacity.value=c.opacity);var p={fragmentShader:u.fragmentShader,vertexShader:u.vertexShader,uniforms:d,lights:!0,fog:!0},f=new THREE.ShaderMaterial(p);c.transparent&&(f.transparent=!0)}else var f=new THREE[l](c);return void 0!==e.DbgName&&(f.name=e.DbgName),f}};