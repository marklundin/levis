THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){};this.geometryHandlers={};this.hierarchyHandlers={};this.addGeometryHandler("ascii",THREE.JSONLoader)};THREE.SceneLoader.prototype={constructor:THREE.SceneLoader,load:function(e,t){var i=this;var r=new THREE.XHRLoader(i.manager);r.setCrossOrigin(this.crossOrigin);r.load(e,function(r){i.parse(JSON.parse(r),t,e)})},setCrossOrigin:function(e){this.crossOrigin=e},addGeometryHandler:function(e,t){this.geometryHandlers[e]={loaderClass:t}},addHierarchyHandler:function(e,t){this.hierarchyHandlers[e]={loaderClass:t}},parse:function(e,t,i){function r(e,t){if("relativeToHTML"==t)return e;else return m+"/"+e}function a(){o(C.scene,D.objects)}function o(e,t){var i,a,n,s,l,h;for(var u in t){var f=C.objects[u];var d=t[u];if(void 0===f){if(d.type&&d.type in p.hierarchyHandlers){if(void 0===d.loading){var m={type:1,url:1,material:1,position:1,rotation:1,scale:1,visible:1,children:1,userData:1,skin:1,morph:1,mirroredLoop:1,duration:1};var y={};for(var T in d)if(!(T in m))y[T]=d[T];g=C.materials[d.material];d.loading=!0;var x=p.hierarchyHandlers[d.type]["loaderObject"];if(x.options)x.load(r(d.url,D.urlBaseType),c(u,e,g,d));else x.load(r(d.url,D.urlBaseType),c(u,e,g,d),y)}}else if(void 0!==d.geometry){v=C.geometries[d.geometry];if(v){var w=!1;g=C.materials[d.material];w=g instanceof THREE.ShaderMaterial;n=d.position;s=d.rotation;l=d.scale;i=d.matrix;h=d.quaternion;if(!d.material)g=new THREE.MeshFaceMaterial(C.face_materials[d.geometry]);if(g instanceof THREE.MeshFaceMaterial&&0===g.materials.length)g=new THREE.MeshFaceMaterial(C.face_materials[d.geometry]);if(g instanceof THREE.MeshFaceMaterial)for(var H=0;H<g.materials.length;H++)w=w||g.materials[H]instanceof THREE.ShaderMaterial;if(w)v.computeTangents();if(d.skin)f=new THREE.SkinnedMesh(v,g);else if(d.morph){f=new THREE.MorphAnimMesh(v,g);if(void 0!==d.duration)f.duration=d.duration;if(void 0!==d.time)f.time=d.time;if(void 0!==d.mirroredLoop)f.mirroredLoop=d.mirroredLoop;if(g.morphNormals)v.computeMorphNormals()}else f=new THREE.Mesh(v,g);f.name=u;if(i){f.matrixAutoUpdate=!1;f.matrix.set(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11],i[12],i[13],i[14],i[15])}else{f.position.fromArray(n);if(h)f.quaternion.fromArray(h);else f.rotation.fromArray(s);f.scale.fromArray(l)}f.visible=d.visible;f.castShadow=d.castShadow;f.receiveShadow=d.receiveShadow;e.add(f);C.objects[u]=f}}else if("DirectionalLight"===d.type||"PointLight"===d.type||"AmbientLight"===d.type){R=void 0!==d.color?d.color:16777215;_=void 0!==d.intensity?d.intensity:1;if("DirectionalLight"===d.type){n=d.direction;b=new THREE.DirectionalLight(R,_);b.position.fromArray(n);if(d.target){A.push({object:b,targetName:d.target});b.target=null}}else if("PointLight"===d.type){n=d.position;a=d.distance;b=new THREE.PointLight(R,_,a);b.position.fromArray(n)}else if("AmbientLight"===d.type)b=new THREE.AmbientLight(R);e.add(b);b.name=u;C.lights[u]=b;C.objects[u]=b}else if("PerspectiveCamera"===d.type||"OrthographicCamera"===d.type){n=d.position;s=d.rotation;h=d.quaternion;if("PerspectiveCamera"===d.type)E=new THREE.PerspectiveCamera(d.fov,d.aspect,d.near,d.far);else if("OrthographicCamera"===d.type)E=new THREE.OrthographicCamera(d.left,d.right,d.top,d.bottom,d.near,d.far);E.name=u;E.position.fromArray(n);if(void 0!==h)E.quaternion.fromArray(h);else if(void 0!==s)E.rotation.fromArray(s);e.add(E);C.cameras[u]=E;C.objects[u]=E}else{n=d.position;s=d.rotation;l=d.scale;h=d.quaternion;f=new THREE.Object3D;f.name=u;f.position.fromArray(n);if(h)f.quaternion.fromArray(h);else f.rotation.fromArray(s);f.scale.fromArray(l);f.visible=void 0!==d.visible?d.visible:!1;e.add(f);C.objects[u]=f;C.empties[u]=f}if(f){if(void 0!==d.userData)for(var S in d.userData){var M=d.userData[S];f.userData[S]=M}if(void 0!==d.groups)for(var H=0;H<d.groups.length;H++){var P=d.groups[H];if(void 0===C.groups[P])C.groups[P]=[];C.groups[P].push(u)}}}if(void 0!==f&&void 0!==d.children)o(f,d.children)}}function n(e,t,i){C.geometries[i]=e;C.face_materials[i]=t;a()}function s(e,t,i,r,o){var n=o.position;var s=o.rotation;var l=o.quaternion;var c=o.scale;e.position.fromArray(n);if(l)e.quaternion.fromArray(l);else e.rotation.fromArray(s);e.scale.fromArray(c);if(r)e.traverse(function(e){e.material=r});var h=void 0!==o.visible?o.visible:!0;e.traverse(function(e){e.visible=h});i.add(e);e.name=t;C.objects[t]=e;a()}function l(e){return function(t,i){t.name=e;n(t,i,e);w-=1;p.onLoadComplete();u()}}function c(e,t,i,r){return function(a){var o;if(a.content)o=a.content;else if(a.dae)o=a.scene;else o=a;s(o,e,t,i,r);w-=1;p.onLoadComplete();u()}}function h(e){return function(t,i){t.name=e;C.geometries[e]=t;C.face_materials[e]=i}}function u(){var e={totalModels:S,totalTextures:M,loadedModels:S-w,loadedTextures:M-H};p.callbackProgress(e,C);p.onLoadProgress();if(0===w&&0===H){f();t(C)}}function f(){for(var e=0;e<A.length;e++){var t=A[e];var i=C.objects[t.targetName];if(i)t.object.target=i;else{t.object.target=new THREE.Object3D;C.scene.add(t.object.target)}t.object.target.userData.targetInverse=t.object}}function d(e,t){t(e);if(void 0!==e.children)for(var i in e.children)d(e.children[i],t)}var p=this;var m=THREE.Loader.prototype.extractUrlBase(i);var v,g,E,y,T,x,b,R,_,w,H,S,M,C;var A=[];var D=e;for(var P in this.geometryHandlers){var L=this.geometryHandlers[P]["loaderClass"];this.geometryHandlers[P]["loaderObject"]=new L}for(var P in this.hierarchyHandlers){var L=this.hierarchyHandlers[P]["loaderClass"];this.hierarchyHandlers[P]["loaderObject"]=new L}w=0;H=0;C={scene:new THREE.Scene,geometries:{},face_materials:{},materials:{},textures:{},objects:{},cameras:{},lights:{},fogs:{},empties:{},groups:{}};if(D.transform){var N=D.transform.position,F=D.transform.rotation,k=D.transform.scale;if(N)C.scene.position.fromArray(N);if(F)C.scene.rotation.fromArray(F);if(k)C.scene.scale.fromArray(k);if(N||F||k){C.scene.updateMatrix();C.scene.updateMatrixWorld()}}var O=function(e){H-=e;u();p.onLoadComplete()};var I=function(e){return function(){O(e)}};var U,V;for(U in D.fogs){V=D.fogs[U];if("linear"===V.type)y=new THREE.Fog(0,V.near,V.far);else if("exp2"===V.type)y=new THREE.FogExp2(0,V.density);x=V.color;y.color.setRGB(x[0],x[1],x[2]);C.fogs[U]=y}var z,B;for(z in D.geometries){B=D.geometries[z];if(B.type in this.geometryHandlers){w+=1;p.onLoadStart()}}for(var j in D.objects)d(D.objects[j],function(e){if(e.type&&e.type in p.hierarchyHandlers){w+=1;p.onLoadStart()}});S=w;for(z in D.geometries){B=D.geometries[z];if("cube"===B.type){v=new THREE.CubeGeometry(B.width,B.height,B.depth,B.widthSegments,B.heightSegments,B.depthSegments);v.name=z;C.geometries[z]=v}else if("plane"===B.type){v=new THREE.PlaneGeometry(B.width,B.height,B.widthSegments,B.heightSegments);v.name=z;C.geometries[z]=v}else if("sphere"===B.type){v=new THREE.SphereGeometry(B.radius,B.widthSegments,B.heightSegments);v.name=z;C.geometries[z]=v}else if("cylinder"===B.type){v=new THREE.CylinderGeometry(B.topRad,B.botRad,B.height,B.radSegs,B.heightSegs);v.name=z;C.geometries[z]=v}else if("torus"===B.type){v=new THREE.TorusGeometry(B.radius,B.tube,B.segmentsR,B.segmentsT);v.name=z;C.geometries[z]=v}else if("icosahedron"===B.type){v=new THREE.IcosahedronGeometry(B.radius,B.subdivisions);v.name=z;C.geometries[z]=v}else if(B.type in this.geometryHandlers){var G={};for(var W in B)if("type"!==W&&"url"!==W)G[W]=B[W];var X=this.geometryHandlers[B.type]["loaderObject"];X.load(r(B.url,D.urlBaseType),l(z),G)}else if("embedded"===B.type){var q=D.embeds[B.id],Y="";q.metadata=D.metadata;if(q){var K=this.geometryHandlers["ascii"]["loaderObject"];var Z=K.parse(q,Y);h(z)(Z.geometry,Z.materials)}}}var Q,$;for(Q in D.textures){$=D.textures[Q];if($.url instanceof Array){H+=$.url.length;for(var J=0;J<$.url.length;J++)p.onLoadStart()}else{H+=1;p.onLoadStart()}}M=H;for(Q in D.textures){$=D.textures[Q];if(void 0!==$.mapping&&void 0!==THREE[$.mapping])$.mapping=new THREE[$.mapping];if($.url instanceof Array){var et=$.url.length;var tt=[];for(var it=0;et>it;it++)tt[it]=r($.url[it],D.urlBaseType);var rt=/\.dds$/i.test(tt[0]);if(rt)T=THREE.ImageUtils.loadCompressedTextureCube(tt,$.mapping,I(et));else T=THREE.ImageUtils.loadTextureCube(tt,$.mapping,I(et))}else{var rt=/\.dds$/i.test($.url);var at=r($.url,D.urlBaseType);var ot=I(1);if(rt)T=THREE.ImageUtils.loadCompressedTexture(at,$.mapping,ot);else T=THREE.ImageUtils.loadTexture(at,$.mapping,ot);if(void 0!==THREE[$.minFilter])T.minFilter=THREE[$.minFilter];if(void 0!==THREE[$.magFilter])T.magFilter=THREE[$.magFilter];if($.anisotropy)T.anisotropy=$.anisotropy;if($.repeat){T.repeat.set($.repeat[0],$.repeat[1]);if(1!==$.repeat[0])T.wrapS=THREE.RepeatWrapping;if(1!==$.repeat[1])T.wrapT=THREE.RepeatWrapping}if($.offset)T.offset.set($.offset[0],$.offset[1]);if($.wrap){var nt={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping};if(void 0!==nt[$.wrap[0]])T.wrapS=nt[$.wrap[0]];if(void 0!==nt[$.wrap[1]])T.wrapT=nt[$.wrap[1]]}}C.textures[Q]=T}var st,lt;var ct;for(st in D.materials){lt=D.materials[st];for(ct in lt.parameters)if("envMap"===ct||"map"===ct||"lightMap"===ct||"bumpMap"===ct)lt.parameters[ct]=C.textures[lt.parameters[ct]];else if("shading"===ct)lt.parameters[ct]="flat"===lt.parameters[ct]?THREE.FlatShading:THREE.SmoothShading;else if("side"===ct)if("double"==lt.parameters[ct])lt.parameters[ct]=THREE.DoubleSide;else if("back"==lt.parameters[ct])lt.parameters[ct]=THREE.BackSide;else lt.parameters[ct]=THREE.FrontSide;else if("blending"===ct)lt.parameters[ct]=lt.parameters[ct]in THREE?THREE[lt.parameters[ct]]:THREE.NormalBlending;else if("combine"===ct)lt.parameters[ct]=lt.parameters[ct]in THREE?THREE[lt.parameters[ct]]:THREE.MultiplyOperation;else if("vertexColors"===ct){if("face"==lt.parameters[ct])lt.parameters[ct]=THREE.FaceColors;else if(lt.parameters[ct])lt.parameters[ct]=THREE.VertexColors}else if("wrapRGB"===ct){var ht=lt.parameters[ct];lt.parameters[ct]=new THREE.Vector3(ht[0],ht[1],ht[2])}if(void 0!==lt.parameters.opacity&&lt.parameters.opacity<1)lt.parameters.transparent=!0;if(lt.parameters.normalMap){var ut=THREE.ShaderLib["normalmap"];var ft=THREE.UniformsUtils.clone(ut.uniforms);var dt=lt.parameters.color;var pt=lt.parameters.specular;var mt=lt.parameters.ambient;var vt=lt.parameters.shininess;ft["tNormal"].value=C.textures[lt.parameters.normalMap];if(lt.parameters.normalScale)ft["uNormalScale"].value.set(lt.parameters.normalScale[0],lt.parameters.normalScale[1]);if(lt.parameters.map){ft["tDiffuse"].value=lt.parameters.map;ft["enableDiffuse"].value=!0}if(lt.parameters.envMap){ft["tCube"].value=lt.parameters.envMap;ft["enableReflection"].value=!0;ft["uReflectivity"].value=lt.parameters.reflectivity}if(lt.parameters.lightMap){ft["tAO"].value=lt.parameters.lightMap;ft["enableAO"].value=!0}if(lt.parameters.specularMap){ft["tSpecular"].value=C.textures[lt.parameters.specularMap];ft["enableSpecular"].value=!0}if(lt.parameters.displacementMap){ft["tDisplacement"].value=C.textures[lt.parameters.displacementMap];ft["enableDisplacement"].value=!0;ft["uDisplacementBias"].value=lt.parameters.displacementBias;ft["uDisplacementScale"].value=lt.parameters.displacementScale}ft["uDiffuseColor"].value.setHex(dt);ft["uSpecularColor"].value.setHex(pt);ft["uAmbientColor"].value.setHex(mt);ft["uShininess"].value=vt;if(lt.parameters.opacity)ft["uOpacity"].value=lt.parameters.opacity;var gt={fragmentShader:ut.fragmentShader,vertexShader:ut.vertexShader,uniforms:ft,lights:!0,fog:!0};g=new THREE.ShaderMaterial(gt)}else g=new THREE[lt.type](lt.parameters);g.name=st;C.materials[st]=g}for(st in D.materials){lt=D.materials[st];if(lt.parameters.materials){var Et=[];for(var it=0;it<lt.parameters.materials.length;it++){var yt=lt.parameters.materials[it];Et.push(C.materials[yt])}C.materials[st].materials=Et}}a();if(C.cameras&&D.defaults.camera)C.currentCamera=C.cameras[D.defaults.camera];if(C.fogs&&D.defaults.fog)C.scene.fog=C.fogs[D.defaults.fog];p.callbackSync(C);u()}};