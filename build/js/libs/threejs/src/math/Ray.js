THREE.Ray=function(e,t){this.origin=void 0!==e?e:new THREE.Vector3,this.direction=void 0!==t?t:new THREE.Vector3},THREE.Ray.prototype={constructor:THREE.Ray,set:function(e,t){return this.origin.copy(e),this.direction.copy(t),this},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,t){var i=t||new THREE.Vector3;return i.copy(this.direction).multiplyScalar(e).add(this.origin)},recast:function(){var e=new THREE.Vector3;return function(t){return this.origin.copy(this.at(t,e)),this}}(),closestPointToPoint:function(e,t){var i=t||new THREE.Vector3;i.subVectors(e,this.origin);var r=i.dot(this.direction);return 0>r?i.copy(this.origin):i.copy(this.direction).multiplyScalar(r).add(this.origin)},distanceToPoint:function(){var e=new THREE.Vector3;return function(t){var i=e.subVectors(t,this.origin).dot(this.direction);return 0>i?this.origin.distanceTo(t):(e.copy(this.direction).multiplyScalar(i).add(this.origin),e.distanceTo(t))}}(),distanceSqToSegment:function(e,t,i,r){var o,n,a,s,l=e.clone().add(t).multiplyScalar(.5),c=t.clone().sub(e).normalize(),h=.5*e.distanceTo(t),u=this.origin.clone().sub(l),d=-this.direction.dot(c),p=u.dot(this.direction),f=-u.dot(c),m=u.lengthSq(),g=Math.abs(1-d*d);if(g>=0)if(o=d*f-p,n=d*p-f,s=h*g,o>=0)if(n>=-s)if(s>=n){var v=1/g;o*=v,n*=v,a=o*(o+d*n+2*p)+n*(d*o+n+2*f)+m}else n=h,o=Math.max(0,-(d*n+p)),a=-o*o+n*(n+2*f)+m;else n=-h,o=Math.max(0,-(d*n+p)),a=-o*o+n*(n+2*f)+m;else-s>=n?(o=Math.max(0,-(-d*h+p)),n=o>0?-h:Math.min(Math.max(-h,-f),h),a=-o*o+n*(n+2*f)+m):s>=n?(o=0,n=Math.min(Math.max(-h,-f),h),a=n*(n+2*f)+m):(o=Math.max(0,-(d*h+p)),n=o>0?h:Math.min(Math.max(-h,-f),h),a=-o*o+n*(n+2*f)+m);else n=d>0?-h:h,o=Math.max(0,-(d*n+p)),a=-o*o+n*(n+2*f)+m;return i&&i.copy(this.direction.clone().multiplyScalar(o).add(this.origin)),r&&r.copy(c.clone().multiplyScalar(n).add(l)),a},isIntersectionSphere:function(e){return this.distanceToPoint(e.center)<=e.radius},isIntersectionPlane:function(e){var t=e.distanceToPoint(this.origin);if(0===t)return!0;var i=e.normal.dot(this.direction);return 0>i*t?!0:!1},distanceToPlane:function(e){var t=e.normal.dot(this.direction);if(0==t)return 0==e.distanceToPoint(this.origin)?0:null;var i=-(this.origin.dot(e.normal)+e.constant)/t;return i>=0?i:null},intersectPlane:function(e,t){var i=this.distanceToPlane(e);return null===i?null:this.at(i,t)},applyMatrix4:function(e){return this.direction.add(this.origin).applyMatrix4(e),this.origin.applyMatrix4(e),this.direction.sub(this.origin),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)},clone:function(){return(new THREE.Ray).copy(this)}};