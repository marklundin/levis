THREE.Frustum=function(e,t,i,r,o,n){this.planes=[void 0!==e?e:new THREE.Plane,void 0!==t?t:new THREE.Plane,void 0!==i?i:new THREE.Plane,void 0!==r?r:new THREE.Plane,void 0!==o?o:new THREE.Plane,void 0!==n?n:new THREE.Plane]},THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(e,t,i,r,o,n){var a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(i),a[3].copy(r),a[4].copy(o),a[5].copy(n),this},copy:function(e){for(var t=this.planes,i=0;6>i;i++)t[i].copy(e.planes[i]);return this},setFromMatrix:function(e){var t=this.planes,i=e.elements,r=i[0],o=i[1],n=i[2],a=i[3],s=i[4],l=i[5],c=i[6],h=i[7],u=i[8],d=i[9],p=i[10],f=i[11],m=i[12],g=i[13],v=i[14],E=i[15];return t[0].setComponents(a-r,h-s,f-u,E-m).normalize(),t[1].setComponents(a+r,h+s,f+u,E+m).normalize(),t[2].setComponents(a+o,h+l,f+d,E+g).normalize(),t[3].setComponents(a-o,h-l,f-d,E-g).normalize(),t[4].setComponents(a-n,h-c,f-p,E-v).normalize(),t[5].setComponents(a+n,h+c,f+p,E+v).normalize(),this},intersectsObject:function(){var e=new THREE.Vector3;return function(t){var i=t.geometry,r=t.matrixWorld;null===i.boundingSphere&&i.computeBoundingSphere();var o=-i.boundingSphere.radius*r.getMaxScaleOnAxis();e.getPositionFromMatrix(r);for(var n=this.planes,a=0;6>a;a++){var s=n[a].distanceToPoint(e);if(o>s)return!1}return!0}}(),intersectsSphere:function(e){for(var t=this.planes,i=e.center,r=-e.radius,o=0;6>o;o++){var n=t[o].distanceToPoint(i);if(r>n)return!1}return!0},intersectsBox:function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(i){for(var r=this.planes,o=0;6>o;o++){var n=r[o];e.x=n.normal.x>0?i.min.x:i.max.x,t.x=n.normal.x>0?i.max.x:i.min.x,e.y=n.normal.y>0?i.min.y:i.max.y,t.y=n.normal.y>0?i.max.y:i.min.y,e.z=n.normal.z>0?i.min.z:i.max.z,t.z=n.normal.z>0?i.max.z:i.min.z;var a=n.distanceToPoint(e),s=n.distanceToPoint(t);if(0>a&&0>s)return!1}return!0}}(),containsPoint:function(e){for(var t=this.planes,i=0;6>i;i++)if(t[i].distanceToPoint(e)<0)return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}};