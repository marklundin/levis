THREE.Line3=function(e,t){this.start=void 0!==e?e:new THREE.Vector3;this.end=void 0!==t?t:new THREE.Vector3};THREE.Line3.prototype={constructor:THREE.Line3,set:function(e,t){this.start.copy(e);this.end.copy(t);return this},copy:function(e){this.start.copy(e.start);this.end.copy(e.end);return this},center:function(e){var t=e||new THREE.Vector3;return t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){var t=e||new THREE.Vector3;return t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,t){var i=t||new THREE.Vector3;return this.delta(i).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(){var e=new THREE.Vector3;var t=new THREE.Vector3;return function(i,r){e.subVectors(i,this.start);t.subVectors(this.end,this.start);var a=t.dot(t);var o=t.dot(e);var n=o/a;if(r)n=THREE.Math.clamp(n,0,1);return n}}(),closestPointToPoint:function(e,t,i){var r=this.closestPointToPointParameter(e,t);var a=i||new THREE.Vector3;return this.delta(a).multiplyScalar(r).add(this.start)},applyMatrix4:function(e){this.start.applyMatrix4(e);this.end.applyMatrix4(e);return this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)},clone:function(){return(new THREE.Line3).copy(this)}};