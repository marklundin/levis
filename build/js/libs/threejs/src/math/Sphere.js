THREE.Sphere=function(e,t){this.center=void 0!==e?e:new THREE.Vector3;this.radius=void 0!==t?t:0};THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(e,t){this.center.copy(e);this.radius=t;return this},setFromPoints:function(e){var t,i=0;for(var r=0,a=e.length;a>r;r++){t=e[r].lengthSq();i=Math.max(i,t)}this.center.set(0,0,0);this.radius=Math.sqrt(i);return this},copy:function(e){this.center.copy(e.center);this.radius=e.radius;return this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t},clampPoint:function(e,t){var i=this.center.distanceToSquared(e);var r=t||new THREE.Vector3;r.copy(e);if(i>this.radius*this.radius){r.sub(this.center).normalize();r.multiplyScalar(this.radius).add(this.center)}return r},getBoundingBox:function(e){var t=e||new THREE.Box3;t.set(this.center,this.center);t.expandByScalar(this.radius);return t},applyMatrix4:function(e){this.center.applyMatrix4(e);this.radius=this.radius*e.getMaxScaleOnAxis();return this},translate:function(e){this.center.add(e);return this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}};