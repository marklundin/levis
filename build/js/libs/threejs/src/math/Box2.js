THREE.Box2=function(e,t){this.min=void 0!==e?e:new THREE.Vector2(1/0,1/0);this.max=void 0!==t?t:new THREE.Vector2(-1/0,-1/0)};THREE.Box2.prototype={constructor:THREE.Box2,set:function(e,t){this.min.copy(e);this.max.copy(t);return this},setFromPoints:function(e){if(e.length>0){var t=e[0];this.min.copy(t);this.max.copy(t);for(var i=1,r=e.length;r>i;i++){t=e[i];if(t.x<this.min.x)this.min.x=t.x;else if(t.x>this.max.x)this.max.x=t.x;if(t.y<this.min.y)this.min.y=t.y;else if(t.y>this.max.y)this.max.y=t.y}}else this.makeEmpty();return this},setFromCenterAndSize:function(){var e=new THREE.Vector2;return function(t,i){var r=e.copy(i).multiplyScalar(.5);this.min.copy(t).sub(r);this.max.copy(t).add(r);return this}}(),copy:function(e){this.min.copy(e.min);this.max.copy(e.max);return this},makeEmpty:function(){this.min.x=this.min.y=1/0;this.max.x=this.max.y=-1/0;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(e){var t=e||new THREE.Vector2;return t.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(e){var t=e||new THREE.Vector2;return t.subVectors(this.max,this.min)},expandByPoint:function(e){this.min.min(e);this.max.max(e);return this},expandByVector:function(e){this.min.sub(e);this.max.add(e);return this},expandByScalar:function(e){this.min.addScalar(-e);this.max.addScalar(e);return this},containsPoint:function(e){if(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)return!1;else return!0},containsBox:function(e){if(this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y)return!0;else return!1},getParameter:function(e){return new THREE.Vector2((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},isIntersectionBox:function(e){if(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)return!1;else return!0},clampPoint:function(e,t){var i=t||new THREE.Vector2;return i.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new THREE.Vector2;return function(t){var i=e.copy(t).clamp(this.min,this.max);return i.sub(t).length()}}(),intersect:function(e){this.min.max(e.min);this.max.min(e.max);return this},union:function(e){this.min.min(e.min);this.max.max(e.max);return this},translate:function(e){this.min.add(e);this.max.add(e);return this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}};