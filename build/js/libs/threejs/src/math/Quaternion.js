THREE.Quaternion=function(e,t,i,r){this._x=e||0,this._y=t||0,this._z=i||0,this._w=void 0!==r?r:1},THREE.Quaternion.prototype={constructor:THREE.Quaternion,_x:0,_y:0,_z:0,_w:0,_euler:void 0,_updateEuler:function(){void 0!==this._euler&&this._euler.setFromQuaternion(this,void 0,!1)},get x(){return this._x},set x(e){this._x=e,this._updateEuler()},get y(){return this._y},set y(e){this._y=e,this._updateEuler()},get z(){return this._z},set z(e){this._z=e,this._updateEuler()},get w(){return this._w},set w(e){this._w=e,this._updateEuler()},set:function(e,t,i,r){return this._x=e,this._y=t,this._z=i,this._w=r,this._updateEuler(),this},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._w=e._w,this._updateEuler(),this},setFromEuler:function(e,t){void 0===typeof e.order&&console.error("ERROR: Quaternion's .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.");var i=Math.cos(e._x/2),r=Math.cos(e._y/2),o=Math.cos(e._z/2),n=Math.sin(e._x/2),a=Math.sin(e._y/2),s=Math.sin(e._z/2);return void 0===e.order||"XYZ"===e.order?(this._x=n*r*o+i*a*s,this._y=i*a*o-n*r*s,this._z=i*r*s+n*a*o,this._w=i*r*o-n*a*s):"YXZ"===e.order?(this._x=n*r*o+i*a*s,this._y=i*a*o-n*r*s,this._z=i*r*s-n*a*o,this._w=i*r*o+n*a*s):"ZXY"===e.order?(this._x=n*r*o-i*a*s,this._y=i*a*o+n*r*s,this._z=i*r*s+n*a*o,this._w=i*r*o-n*a*s):"ZYX"===e.order?(this._x=n*r*o-i*a*s,this._y=i*a*o+n*r*s,this._z=i*r*s-n*a*o,this._w=i*r*o+n*a*s):"YZX"===e.order?(this._x=n*r*o+i*a*s,this._y=i*a*o+n*r*s,this._z=i*r*s-n*a*o,this._w=i*r*o-n*a*s):"XZY"===e.order&&(this._x=n*r*o-i*a*s,this._y=i*a*o-n*r*s,this._z=i*r*s+n*a*o,this._w=i*r*o+n*a*s),t!==!1&&this._updateEuler(),this},setFromAxisAngle:function(e,t){var i=t/2,r=Math.sin(i);return this._x=e.x*r,this._y=e.y*r,this._z=e.z*r,this._w=Math.cos(i),this._updateEuler(),this},setFromRotationMatrix:function(e){var t,i=e.elements,r=i[0],o=i[4],n=i[8],a=i[1],s=i[5],l=i[9],c=i[2],h=i[6],u=i[10],d=r+s+u;return d>0?(t=.5/Math.sqrt(d+1),this._w=.25/t,this._x=(h-l)*t,this._y=(n-c)*t,this._z=(a-o)*t):r>s&&r>u?(t=2*Math.sqrt(1+r-s-u),this._w=(h-l)/t,this._x=.25*t,this._y=(o+a)/t,this._z=(n+c)/t):s>u?(t=2*Math.sqrt(1+s-r-u),this._w=(n-c)/t,this._x=(o+a)/t,this._y=.25*t,this._z=(l+h)/t):(t=2*Math.sqrt(1+u-r-s),this._w=(a-o)/t,this._x=(n+c)/t,this._y=(l+h)/t,this._z=.25*t),this._updateEuler(),this},inverse:function(){return this.conjugate().normalize(),this},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._updateEuler(),this},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this},multiply:function(e,t){return void 0!==t?(console.warn("DEPRECATED: Quaternion's .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,t)):this.multiplyQuaternions(this,e)},multiplyQuaternions:function(e,t){var i=e._x,r=e._y,o=e._z,n=e._w,a=t._x,s=t._y,l=t._z,c=t._w;return this._x=i*c+n*a+r*l-o*s,this._y=r*c+n*s+o*a-i*l,this._z=o*c+n*l+i*s-r*a,this._w=n*c-i*a-r*s-o*l,this._updateEuler(),this},multiplyVector3:function(e){return console.warn("DEPRECATED: Quaternion's .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)},slerp:function(e,t){var i=this._x,r=this._y,o=this._z,n=this._w,a=n*e._w+i*e._x+r*e._y+o*e._z;if(0>a?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=n,this._x=i,this._y=r,this._z=o,this;var s=Math.acos(a),l=Math.sqrt(1-a*a);if(Math.abs(l)<.001)return this._w=.5*(n+this._w),this._x=.5*(i+this._x),this._y=.5*(r+this._y),this._z=.5*(o+this._z),this;var c=Math.sin((1-t)*s)/l,h=Math.sin(t*s)/l;return this._w=n*c+this._w*h,this._x=i*c+this._x*h,this._y=r*c+this._y*h,this._z=o*c+this._z*h,this._updateEuler(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],this._w=e[3],this._updateEuler(),this},toArray:function(){return[this._x,this._y,this._z,this._w]},clone:function(){return new THREE.Quaternion(this._x,this._y,this._z,this._w)}},THREE.Quaternion.slerp=function(e,t,i,r){return i.copy(e).slerp(t,r)};