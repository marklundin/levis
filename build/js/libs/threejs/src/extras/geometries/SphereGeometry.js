THREE.SphereGeometry=function(e,t,i,r,a,n,o){THREE.Geometry.call(this);this.radius=e=e||50;this.widthSegments=t=Math.max(3,Math.floor(t)||8);this.heightSegments=i=Math.max(2,Math.floor(i)||6);this.phiStart=r=void 0!==r?r:0;this.phiLength=a=void 0!==a?a:2*Math.PI;this.thetaStart=n=void 0!==n?n:0;this.thetaLength=o=void 0!==o?o:Math.PI;var s,l,c=[],h=[];for(l=0;i>=l;l++){var u=[];var f=[];for(s=0;t>=s;s++){var d=s/t;var p=l/i;var m=new THREE.Vector3;m.x=-e*Math.cos(r+d*a)*Math.sin(n+p*o);m.y=e*Math.cos(n+p*o);m.z=e*Math.sin(r+d*a)*Math.sin(n+p*o);this.vertices.push(m);u.push(this.vertices.length-1);f.push(new THREE.Vector2(d,1-p))}c.push(u);h.push(f)}for(l=0;l<this.heightSegments;l++)for(s=0;s<this.widthSegments;s++){var v=c[l][s+1];var g=c[l][s];var E=c[l+1][s];var y=c[l+1][s+1];var T=this.vertices[v].clone().normalize();var x=this.vertices[g].clone().normalize();var _=this.vertices[E].clone().normalize();var b=this.vertices[y].clone().normalize();var R=h[l][s+1].clone();var w=h[l][s].clone();var H=h[l+1][s].clone();var S=h[l+1][s+1].clone();if(Math.abs(this.vertices[v].y)===this.radius){this.faces.push(new THREE.Face3(v,E,y,[T,_,b]));this.faceVertexUvs[0].push([R,H,S])}else if(Math.abs(this.vertices[E].y)===this.radius){this.faces.push(new THREE.Face3(v,g,E,[T,x,_]));this.faceVertexUvs[0].push([R,w,H])}else{this.faces.push(new THREE.Face4(v,g,E,y,[T,x,_,b]));this.faceVertexUvs[0].push([R,w,H,S])}}this.computeCentroids();this.computeFaceNormals();this.boundingSphere=new THREE.Sphere(new THREE.Vector3,e)};THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype);