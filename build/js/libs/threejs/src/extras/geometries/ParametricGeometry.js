THREE.ParametricGeometry=function(e,t,i,r){THREE.Geometry.call(this);var o=this.vertices,n=this.faces,a=this.faceVertexUvs[0];r=void 0===r?!1:r;var s,l,c,h,u,d=t+1;for(s=0;i>=s;s++)for(u=s/i,l=0;t>=l;l++)h=l/t,c=e(h,u),o.push(c);var p,f,m,v,g,E,y,T;for(s=0;i>s;s++)for(l=0;t>l;l++)p=s*d+l,f=s*d+l+1,m=(s+1)*d+l,v=(s+1)*d+l+1,g=new THREE.Vector2(l/t,s/i),E=new THREE.Vector2((l+1)/t,s/i),y=new THREE.Vector2(l/t,(s+1)/i),T=new THREE.Vector2((l+1)/t,(s+1)/i),r?(n.push(new THREE.Face3(p,f,m)),n.push(new THREE.Face3(f,v,m)),a.push([g,E,y]),a.push([E,T,y])):(n.push(new THREE.Face4(p,f,v,m)),a.push([g,E,T,y]));this.computeCentroids(),this.computeFaceNormals(),this.computeVertexNormals()},THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype);