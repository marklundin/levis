THREE.TorusGeometry=function(e,t,i,r,a){THREE.Geometry.call(this);this.radius=e||100;this.tube=t||40;this.radialSegments=i||8;this.tubularSegments=r||6;this.arc=a||2*Math.PI;var n=new THREE.Vector3,o=[],s=[];for(var l=0;l<=this.radialSegments;l++)for(var c=0;c<=this.tubularSegments;c++){var h=c/this.tubularSegments*this.arc;var u=2*l/this.radialSegments*Math.PI;n.x=this.radius*Math.cos(h);n.y=this.radius*Math.sin(h);var f=new THREE.Vector3;f.x=(this.radius+this.tube*Math.cos(u))*Math.cos(h);f.y=(this.radius+this.tube*Math.cos(u))*Math.sin(h);f.z=this.tube*Math.sin(u);this.vertices.push(f);o.push(new THREE.Vector2(c/this.tubularSegments,l/this.radialSegments));s.push(f.clone().sub(n).normalize())}for(var l=1;l<=this.radialSegments;l++)for(var c=1;c<=this.tubularSegments;c++){var d=(this.tubularSegments+1)*l+c-1;var p=(this.tubularSegments+1)*(l-1)+c-1;var m=(this.tubularSegments+1)*(l-1)+c;var v=(this.tubularSegments+1)*l+c;var g=new THREE.Face4(d,p,m,v,[s[d],s[p],s[m],s[v]]);g.normal.add(s[d]);g.normal.add(s[p]);g.normal.add(s[m]);g.normal.add(s[v]);g.normal.normalize();this.faces.push(g);this.faceVertexUvs[0].push([o[d].clone(),o[p].clone(),o[m].clone(),o[v].clone()])}this.computeCentroids()};THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype);