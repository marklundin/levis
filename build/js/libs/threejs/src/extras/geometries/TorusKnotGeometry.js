THREE.TorusKnotGeometry=function(e,t,i,r,a,n,o){function s(e,t,i,r,a){var n=Math.cos(e);var o=Math.sin(e);var s=t/i*e;var l=Math.cos(s);var c=.5*r*(2+l)*n;var h=.5*r*(2+l)*o;var u=.5*a*r*Math.sin(s);return new THREE.Vector3(c,h,u)}THREE.Geometry.call(this);var l=this;this.radius=e||100;this.tube=t||40;this.radialSegments=i||64;this.tubularSegments=r||8;this.p=a||2;this.q=n||3;this.heightScale=o||1;this.grid=new Array(this.radialSegments);var c=new THREE.Vector3;var h=new THREE.Vector3;var u=new THREE.Vector3;for(var f=0;f<this.radialSegments;++f){this.grid[f]=new Array(this.tubularSegments);var d=2*(f/this.radialSegments)*this.p*Math.PI;var p=s(d,this.q,this.p,this.radius,this.heightScale);var m=s(d+.01,this.q,this.p,this.radius,this.heightScale);c.subVectors(m,p);h.addVectors(m,p);u.crossVectors(c,h);h.crossVectors(u,c);u.normalize();h.normalize();for(var v=0;v<this.tubularSegments;++v){var g=2*(v/this.tubularSegments)*Math.PI;var E=-this.tube*Math.cos(g);var y=this.tube*Math.sin(g);var T=new THREE.Vector3;T.x=p.x+E*h.x+y*u.x;T.y=p.y+E*h.y+y*u.y;T.z=p.z+E*h.z+y*u.z;this.grid[f][v]=l.vertices.push(T)-1}}for(var f=0;f<this.radialSegments;++f)for(var v=0;v<this.tubularSegments;++v){var x=(f+1)%this.radialSegments;var _=(v+1)%this.tubularSegments;var b=this.grid[f][v];var R=this.grid[x][v];var w=this.grid[x][_];var H=this.grid[f][_];var S=new THREE.Vector2(f/this.radialSegments,v/this.tubularSegments);var M=new THREE.Vector2((f+1)/this.radialSegments,v/this.tubularSegments);var C=new THREE.Vector2((f+1)/this.radialSegments,(v+1)/this.tubularSegments);var A=new THREE.Vector2(f/this.radialSegments,(v+1)/this.tubularSegments);this.faces.push(new THREE.Face4(b,R,w,H));this.faceVertexUvs[0].push([S,M,C,A])}this.computeCentroids();this.computeFaceNormals();this.computeVertexNormals()};THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype);