THREE.CylinderGeometry=function(e,t,i,r,n,o){THREE.Geometry.call(this),this.radiusTop=e=void 0!==e?e:20,this.radiusBottom=t=void 0!==t?t:20,this.height=i=void 0!==i?i:100,this.radialSegments=r=r||8,this.heightSegments=n=n||1,this.openEnded=o=void 0!==o?o:!1;var a,s,l=i/2,c=[],h=[];for(s=0;n>=s;s++){var u=[],d=[],p=s/n,f=p*(t-e)+e;for(a=0;r>=a;a++){var m=a/r,v=new THREE.Vector3;v.x=f*Math.sin(2*m*Math.PI),v.y=-p*i+l,v.z=f*Math.cos(2*m*Math.PI),this.vertices.push(v),u.push(this.vertices.length-1),d.push(new THREE.Vector2(m,1-p))}c.push(u),h.push(d)}var g,E,y=(t-e)/i;for(a=0;r>a;a++)for(0!==e?(g=this.vertices[c[0][a]].clone(),E=this.vertices[c[0][a+1]].clone()):(g=this.vertices[c[1][a]].clone(),E=this.vertices[c[1][a+1]].clone()),g.setY(Math.sqrt(g.x*g.x+g.z*g.z)*y).normalize(),E.setY(Math.sqrt(E.x*E.x+E.z*E.z)*y).normalize(),s=0;n>s;s++){var T=c[s][a],x=c[s+1][a],_=c[s+1][a+1],b=c[s][a+1],R=g.clone(),w=g.clone(),H=E.clone(),S=E.clone(),M=h[s][a].clone(),C=h[s+1][a].clone(),A=h[s+1][a+1].clone(),D=h[s][a+1].clone();this.faces.push(new THREE.Face4(T,x,_,b,[R,w,H,S])),this.faceVertexUvs[0].push([M,C,A,D])}if(o===!1&&e>0)for(this.vertices.push(new THREE.Vector3(0,l,0)),a=0;r>a;a++){var T=c[0][a],x=c[0][a+1],_=this.vertices.length-1,R=new THREE.Vector3(0,1,0),w=new THREE.Vector3(0,1,0),H=new THREE.Vector3(0,1,0),M=h[0][a].clone(),C=h[0][a+1].clone(),A=new THREE.Vector2(C.u,0);this.faces.push(new THREE.Face3(T,x,_,[R,w,H])),this.faceVertexUvs[0].push([M,C,A])}if(o===!1&&t>0)for(this.vertices.push(new THREE.Vector3(0,-l,0)),a=0;r>a;a++){var T=c[s][a+1],x=c[s][a],_=this.vertices.length-1,R=new THREE.Vector3(0,-1,0),w=new THREE.Vector3(0,-1,0),H=new THREE.Vector3(0,-1,0),M=h[s][a+1].clone(),C=h[s][a].clone(),A=new THREE.Vector2(C.u,1);this.faces.push(new THREE.Face3(T,x,_,[R,w,H])),this.faceVertexUvs[0].push([M,C,A])}this.computeCentroids(),this.computeFaceNormals()},THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);