THREE.CylinderGeometry=function(e,t,i,r,n,a){THREE.Geometry.call(this);this.radiusTop=e=void 0!==e?e:20;this.radiusBottom=t=void 0!==t?t:20;this.height=i=void 0!==i?i:100;this.radialSegments=r=r||8;this.heightSegments=n=n||1;this.openEnded=a=void 0!==a?a:!1;var o=i/2;var s,l,c=[],h=[];for(l=0;n>=l;l++){var u=[];var f=[];var d=l/n;var p=d*(t-e)+e;for(s=0;r>=s;s++){var m=s/r;var v=new THREE.Vector3;v.x=p*Math.sin(2*m*Math.PI);v.y=-d*i+o;v.z=p*Math.cos(2*m*Math.PI);this.vertices.push(v);u.push(this.vertices.length-1);f.push(new THREE.Vector2(m,1-d))}c.push(u);h.push(f)}var g=(t-e)/i;var E,y;for(s=0;r>s;s++){if(0!==e){E=this.vertices[c[0][s]].clone();y=this.vertices[c[0][s+1]].clone()}else{E=this.vertices[c[1][s]].clone();y=this.vertices[c[1][s+1]].clone()}E.setY(Math.sqrt(E.x*E.x+E.z*E.z)*g).normalize();y.setY(Math.sqrt(y.x*y.x+y.z*y.z)*g).normalize();for(l=0;n>l;l++){var T=c[l][s];var _=c[l+1][s];var x=c[l+1][s+1];var b=c[l][s+1];var R=E.clone();var w=E.clone();var H=y.clone();var S=y.clone();var M=h[l][s].clone();var C=h[l+1][s].clone();var A=h[l+1][s+1].clone();var D=h[l][s+1].clone();this.faces.push(new THREE.Face4(T,_,x,b,[R,w,H,S]));this.faceVertexUvs[0].push([M,C,A,D])}}if(a===!1&&e>0){this.vertices.push(new THREE.Vector3(0,o,0));for(s=0;r>s;s++){var T=c[0][s];var _=c[0][s+1];var x=this.vertices.length-1;var R=new THREE.Vector3(0,1,0);var w=new THREE.Vector3(0,1,0);var H=new THREE.Vector3(0,1,0);var M=h[0][s].clone();var C=h[0][s+1].clone();var A=new THREE.Vector2(C.u,0);this.faces.push(new THREE.Face3(T,_,x,[R,w,H]));this.faceVertexUvs[0].push([M,C,A])}}if(a===!1&&t>0){this.vertices.push(new THREE.Vector3(0,-o,0));for(s=0;r>s;s++){var T=c[l][s+1];var _=c[l][s];var x=this.vertices.length-1;var R=new THREE.Vector3(0,-1,0);var w=new THREE.Vector3(0,-1,0);var H=new THREE.Vector3(0,-1,0);var M=h[l][s+1].clone();var C=h[l][s].clone();var A=new THREE.Vector2(C.u,1);this.faces.push(new THREE.Face3(T,_,x,[R,w,H]));this.faceVertexUvs[0].push([M,C,A])}}this.computeCentroids();this.computeFaceNormals()};THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype);