THREE.Path=function(e){THREE.CurvePath.call(this),this.actions=[],e&&this.fromPoints(e)},THREE.Path.prototype=Object.create(THREE.CurvePath.prototype),THREE.PathActions={MOVE_TO:"moveTo",LINE_TO:"lineTo",QUADRATIC_CURVE_TO:"quadraticCurveTo",BEZIER_CURVE_TO:"bezierCurveTo",CSPLINE_THRU:"splineThru",ARC:"arc",ELLIPSE:"ellipse"},THREE.Path.prototype.fromPoints=function(e){this.moveTo(e[0].x,e[0].y);for(var t=1,i=e.length;i>t;t++)this.lineTo(e[t].x,e[t].y)},THREE.Path.prototype.moveTo=function(){var e=Array.prototype.slice.call(arguments);this.actions.push({action:THREE.PathActions.MOVE_TO,args:e})},THREE.Path.prototype.lineTo=function(e,t){var i=Array.prototype.slice.call(arguments),r=this.actions[this.actions.length-1].args,n=r[r.length-2],o=r[r.length-1],a=new THREE.LineCurve(new THREE.Vector2(n,o),new THREE.Vector2(e,t));this.curves.push(a),this.actions.push({action:THREE.PathActions.LINE_TO,args:i})},THREE.Path.prototype.quadraticCurveTo=function(e,t,i,r){var n=Array.prototype.slice.call(arguments),o=this.actions[this.actions.length-1].args,a=o[o.length-2],s=o[o.length-1],l=new THREE.QuadraticBezierCurve(new THREE.Vector2(a,s),new THREE.Vector2(e,t),new THREE.Vector2(i,r));this.curves.push(l),this.actions.push({action:THREE.PathActions.QUADRATIC_CURVE_TO,args:n})},THREE.Path.prototype.bezierCurveTo=function(e,t,i,r,n,o){var a=Array.prototype.slice.call(arguments),s=this.actions[this.actions.length-1].args,l=s[s.length-2],c=s[s.length-1],h=new THREE.CubicBezierCurve(new THREE.Vector2(l,c),new THREE.Vector2(e,t),new THREE.Vector2(i,r),new THREE.Vector2(n,o));this.curves.push(h),this.actions.push({action:THREE.PathActions.BEZIER_CURVE_TO,args:a})},THREE.Path.prototype.splineThru=function(e){var t=Array.prototype.slice.call(arguments),i=this.actions[this.actions.length-1].args,r=i[i.length-2],n=i[i.length-1],o=[new THREE.Vector2(r,n)];Array.prototype.push.apply(o,e);var a=new THREE.SplineCurve(o);this.curves.push(a),this.actions.push({action:THREE.PathActions.CSPLINE_THRU,args:t})},THREE.Path.prototype.arc=function(e,t,i,r,n,o){var a=this.actions[this.actions.length-1].args,s=a[a.length-2],l=a[a.length-1];this.absarc(e+s,t+l,i,r,n,o)},THREE.Path.prototype.absarc=function(e,t,i,r,n,o){this.absellipse(e,t,i,i,r,n,o)},THREE.Path.prototype.ellipse=function(e,t,i,r,n,o,a){var s=this.actions[this.actions.length-1].args,l=s[s.length-2],c=s[s.length-1];this.absellipse(e+l,t+c,i,r,n,o,a)},THREE.Path.prototype.absellipse=function(e,t,i,r,n,o,a){var s=Array.prototype.slice.call(arguments),l=new THREE.EllipseCurve(e,t,i,r,n,o,a);this.curves.push(l);var c=l.getPoint(a?1:0);s.push(c.x),s.push(c.y),this.actions.push({action:THREE.PathActions.ELLIPSE,args:s})},THREE.Path.prototype.getSpacedPoints=function(e){e||(e=40);for(var t=[],i=0;e>i;i++)t.push(this.getPoint(i/e));return t},THREE.Path.prototype.getPoints=function(e,t){if(this.useSpacedPoints)return console.log("tata"),this.getSpacedPoints(e,t);e=e||12;var i,r,n,o,a,s,l,c,h,u,d,p,f,m,g,v,E,y,T=[];for(i=0,r=this.actions.length;r>i;i++)switch(n=this.actions[i],o=n.action,a=n.args,o){case THREE.PathActions.MOVE_TO:T.push(new THREE.Vector2(a[0],a[1]));break;case THREE.PathActions.LINE_TO:T.push(new THREE.Vector2(a[0],a[1]));break;case THREE.PathActions.QUADRATIC_CURVE_TO:for(s=a[2],l=a[3],u=a[0],d=a[1],T.length>0?(m=T[T.length-1],p=m.x,f=m.y):(m=this.actions[i-1].args,p=m[m.length-2],f=m[m.length-1]),g=1;e>=g;g++)v=g/e,E=THREE.Shape.Utils.b2(v,p,u,s),y=THREE.Shape.Utils.b2(v,f,d,l),T.push(new THREE.Vector2(E,y));break;case THREE.PathActions.BEZIER_CURVE_TO:for(s=a[4],l=a[5],u=a[0],d=a[1],c=a[2],h=a[3],T.length>0?(m=T[T.length-1],p=m.x,f=m.y):(m=this.actions[i-1].args,p=m[m.length-2],f=m[m.length-1]),g=1;e>=g;g++)v=g/e,E=THREE.Shape.Utils.b3(v,p,u,c,s),y=THREE.Shape.Utils.b3(v,f,d,h,l),T.push(new THREE.Vector2(E,y));break;case THREE.PathActions.CSPLINE_THRU:m=this.actions[i-1].args;var _=new THREE.Vector2(m[m.length-2],m[m.length-1]),x=[_],b=e*a[0].length;x=x.concat(a[0]);var R=new THREE.SplineCurve(x);for(g=1;b>=g;g++)T.push(R.getPointAt(g/b));break;case THREE.PathActions.ARC:var w,H=a[0],S=a[1],M=a[2],C=a[3],A=a[4],D=!!a[5],P=A-C,L=2*e;for(g=1;L>=g;g++)v=g/L,D||(v=1-v),w=C+v*P,E=H+M*Math.cos(w),y=S+M*Math.sin(w),T.push(new THREE.Vector2(E,y));break;case THREE.PathActions.ELLIPSE:var w,H=a[0],S=a[1],N=a[2],F=a[3],C=a[4],A=a[5],D=!!a[6],P=A-C,L=2*e;for(g=1;L>=g;g++)v=g/L,D||(v=1-v),w=C+v*P,E=H+N*Math.cos(w),y=S+F*Math.sin(w),T.push(new THREE.Vector2(E,y))}var I=T[T.length-1],k=1e-10;return Math.abs(I.x-T[0].x)<k&&Math.abs(I.y-T[0].y)<k&&T.splice(T.length-1,1),t&&T.push(T[0]),T},THREE.Path.prototype.toShapes=function(e){var t,i,r,n,o,a=[],s=new THREE.Path;for(t=0,i=this.actions.length;i>t;t++)r=this.actions[t],o=r.args,n=r.action,n==THREE.PathActions.MOVE_TO&&0!=s.actions.length&&(a.push(s),s=new THREE.Path),s[n].apply(s,o);if(0!=s.actions.length&&a.push(s),0==a.length)return[];var l,c,h,u=[];if(1==a.length)return c=a[0],h=new THREE.Shape,h.actions=c.actions,h.curves=c.curves,u.push(h),u;var d=!THREE.Shape.Utils.isClockWise(a[0].getPoints());if(d=e?!d:d)for(h=new THREE.Shape,t=0,i=a.length;i>t;t++)c=a[t],l=THREE.Shape.Utils.isClockWise(c.getPoints()),l=e?!l:l,l?(h.actions=c.actions,h.curves=c.curves,u.push(h),h=new THREE.Shape):h.holes.push(c);else{for(h=void 0,t=0,i=a.length;i>t;t++)c=a[t],l=THREE.Shape.Utils.isClockWise(c.getPoints()),l=e?!l:l,l?(h&&u.push(h),h=new THREE.Shape,h.actions=c.actions,h.curves=c.curves):h.holes.push(c);u.push(h)}return u};