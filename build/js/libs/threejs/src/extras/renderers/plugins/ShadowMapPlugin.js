THREE.ShadowMapPlugin=function(){function e(e,t){var i=new THREE.DirectionalLight;i.isVirtual=!0,i.onlyShadow=!0,i.castShadow=!0,i.shadowCameraNear=e.shadowCameraNear,i.shadowCameraFar=e.shadowCameraFar,i.shadowCameraLeft=e.shadowCameraLeft,i.shadowCameraRight=e.shadowCameraRight,i.shadowCameraBottom=e.shadowCameraBottom,i.shadowCameraTop=e.shadowCameraTop,i.shadowCameraVisible=e.shadowCameraVisible,i.shadowDarkness=e.shadowDarkness,i.shadowBias=e.shadowCascadeBias[t],i.shadowMapWidth=e.shadowCascadeWidth[t],i.shadowMapHeight=e.shadowCascadeHeight[t],i.pointsWorld=[],i.pointsFrustum=[];for(var r=i.pointsWorld,o=i.pointsFrustum,n=0;8>n;n++)r[n]=new THREE.Vector3,o[n]=new THREE.Vector3;var a=e.shadowCascadeNearZ[t],s=e.shadowCascadeFarZ[t];return o[0].set(-1,-1,a),o[1].set(1,-1,a),o[2].set(-1,1,a),o[3].set(1,1,a),o[4].set(-1,-1,s),o[5].set(1,-1,s),o[6].set(-1,1,s),o[7].set(1,1,s),i}function t(e,t){var i=e.shadowCascadeArray[t];i.position.copy(e.position),i.target.position.copy(e.target.position),i.lookAt(i.target),i.shadowCameraVisible=e.shadowCameraVisible,i.shadowDarkness=e.shadowDarkness,i.shadowBias=e.shadowCascadeBias[t];var r=e.shadowCascadeNearZ[t],o=e.shadowCascadeFarZ[t],n=i.pointsFrustum;n[0].z=r,n[1].z=r,n[2].z=r,n[3].z=r,n[4].z=o,n[5].z=o,n[6].z=o,n[7].z=o}function i(e,t){var i=t.shadowCamera,r=t.pointsFrustum,o=t.pointsWorld;d.set(1/0,1/0,1/0),p.set(-1/0,-1/0,-1/0);for(var n=0;8>n;n++){var a=o[n];a.copy(r[n]),THREE.ShadowMapPlugin.__projector.unprojectVector(a,e),a.applyMatrix4(i.matrixWorldInverse),a.x<d.x&&(d.x=a.x),a.x>p.x&&(p.x=a.x),a.y<d.y&&(d.y=a.y),a.y>p.y&&(p.y=a.y),a.z<d.z&&(d.z=a.z),a.z>p.z&&(p.z=a.z)}i.left=d.x,i.right=p.x,i.top=p.y,i.bottom=d.y,i.updateProjectionMatrix()}function r(e){return e.material instanceof THREE.MeshFaceMaterial?e.material.materials[0]:e.material}var o,n,a,s,l,c,h=new THREE.Frustum,u=new THREE.Matrix4,d=new THREE.Vector3,p=new THREE.Vector3,f=new THREE.Vector3;this.init=function(e){o=e.context,n=e;var t=THREE.ShaderLib.depthRGBA,i=THREE.UniformsUtils.clone(t.uniforms);a=new THREE.ShaderMaterial({fragmentShader:t.fragmentShader,vertexShader:t.vertexShader,uniforms:i}),s=new THREE.ShaderMaterial({fragmentShader:t.fragmentShader,vertexShader:t.vertexShader,uniforms:i,morphTargets:!0}),l=new THREE.ShaderMaterial({fragmentShader:t.fragmentShader,vertexShader:t.vertexShader,uniforms:i,skinning:!0}),c=new THREE.ShaderMaterial({fragmentShader:t.fragmentShader,vertexShader:t.vertexShader,uniforms:i,morphTargets:!0,skinning:!0}),a._shadowPass=!0,s._shadowPass=!0,l._shadowPass=!0,c._shadowPass=!0},this.render=function(e,t){n.shadowMapEnabled&&n.shadowMapAutoUpdate&&this.update(e,t)},this.update=function(d,p){var m,v,g,E,y,T,x,b,_,R,w,H,S,M,C=[],A=0,D=null;for(o.clearColor(1,1,1,1),o.disable(o.BLEND),o.enable(o.CULL_FACE),o.frontFace(o.CCW),n.shadowMapCullFace===THREE.CullFaceFront?o.cullFace(o.FRONT):o.cullFace(o.BACK),n.setDepthTest(!0),m=0,v=d.__lights.length;v>m;m++)if(S=d.__lights[m],S.castShadow)if(S instanceof THREE.DirectionalLight&&S.shadowCascade)for(y=0;y<S.shadowCascadeCount;y++){var P;if(S.shadowCascadeArray[y])P=S.shadowCascadeArray[y];else{P=e(S,y),P.originalCamera=p;var L=new THREE.Gyroscope;L.position=S.shadowCascadeOffset,L.add(P),L.add(P.target),p.add(L),S.shadowCascadeArray[y]=P,console.log("Created virtualLight",P)}t(S,y),C[A]=P,A++}else C[A]=S,A++;for(m=0,v=C.length;v>m;m++){if(S=C[m],!S.shadowMap){var N=THREE.LinearFilter;n.shadowMapType===THREE.PCFSoftShadowMap&&(N=THREE.NearestFilter);var F={minFilter:N,magFilter:N,format:THREE.RGBAFormat};S.shadowMap=new THREE.WebGLRenderTarget(S.shadowMapWidth,S.shadowMapHeight,F),S.shadowMapSize=new THREE.Vector2(S.shadowMapWidth,S.shadowMapHeight),S.shadowMatrix=new THREE.Matrix4}if(!S.shadowCamera){if(S instanceof THREE.SpotLight)S.shadowCamera=new THREE.PerspectiveCamera(S.shadowCameraFov,S.shadowMapWidth/S.shadowMapHeight,S.shadowCameraNear,S.shadowCameraFar);else{if(!(S instanceof THREE.DirectionalLight)){console.error("Unsupported light type for shadow");continue}S.shadowCamera=new THREE.OrthographicCamera(S.shadowCameraLeft,S.shadowCameraRight,S.shadowCameraTop,S.shadowCameraBottom,S.shadowCameraNear,S.shadowCameraFar)}d.add(S.shadowCamera),d.autoUpdate===!0&&d.updateMatrixWorld()}for(S.shadowCameraVisible&&!S.cameraHelper&&(S.cameraHelper=new THREE.CameraHelper(S.shadowCamera),S.shadowCamera.add(S.cameraHelper)),S.isVirtual&&P.originalCamera==p&&i(p,S),T=S.shadowMap,x=S.shadowMatrix,b=S.shadowCamera,b.position.getPositionFromMatrix(S.matrixWorld),f.getPositionFromMatrix(S.target.matrixWorld),b.lookAt(f),b.updateMatrixWorld(),b.matrixWorldInverse.getInverse(b.matrixWorld),S.cameraHelper&&(S.cameraHelper.visible=S.shadowCameraVisible),S.shadowCameraVisible&&S.cameraHelper.update(),x.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),x.multiply(b.projectionMatrix),x.multiply(b.matrixWorldInverse),u.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),h.setFromMatrix(u),n.setRenderTarget(T),n.clear(),M=d.__webglObjects,g=0,E=M.length;E>g;g++)w=M[g],H=w.object,w.render=!1,H.visible&&H.castShadow&&((H instanceof THREE.Mesh||H instanceof THREE.ParticleSystem)&&H.frustumCulled&&!h.intersectsObject(H)||(H._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,H.matrixWorld),w.render=!0));var I,k,O;for(g=0,E=M.length;E>g;g++)w=M[g],w.render&&(H=w.object,_=w.buffer,I=r(H),k=H.geometry.morphTargets.length>0&&I.morphTargets,O=H instanceof THREE.SkinnedMesh&&I.skinning,R=H.customDepthMaterial?H.customDepthMaterial:O?k?c:l:k?s:a,_ instanceof THREE.BufferGeometry?n.renderBufferDirect(b,d.__lights,D,R,_,H):n.renderBuffer(b,d.__lights,D,R,_,H));for(M=d.__webglObjectsImmediate,g=0,E=M.length;E>g;g++)w=M[g],H=w.object,H.visible&&H.castShadow&&(H._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,H.matrixWorld),n.renderImmediateObject(b,d.__lights,D,a,H))}var U=n.getClearColor(),V=n.getClearAlpha();o.clearColor(U.r,U.g,U.b,V),o.enable(o.BLEND),n.shadowMapCullFace===THREE.CullFaceFront&&o.cullFace(o.BACK)}},THREE.ShadowMapPlugin.__projector=new THREE.Projector;