THREE.GeometryUtils={merge:function(e,t,i){var r,o,n=e.vertices.length,a=(e.faceVertexUvs[0].length,t instanceof THREE.Mesh?t.geometry:t),s=e.vertices,l=a.vertices,c=e.faces,h=a.faces,u=e.faceVertexUvs[0],d=a.faceVertexUvs[0];void 0===i&&(i=0),t instanceof THREE.Mesh&&(t.matrixAutoUpdate&&t.updateMatrix(),r=t.matrix,o=(new THREE.Matrix3).getNormalMatrix(r));for(var p=0,f=l.length;f>p;p++){var m=l[p],v=m.clone();r&&v.applyMatrix4(r),s.push(v)}for(p=0,f=h.length;f>p;p++){var g,E,y,T=h[p],_=T.vertexNormals,b=T.vertexColors;T instanceof THREE.Face3?g=new THREE.Face3(T.a+n,T.b+n,T.c+n):T instanceof THREE.Face4&&(g=new THREE.Face4(T.a+n,T.b+n,T.c+n,T.d+n)),g.normal.copy(T.normal),o&&g.normal.applyMatrix3(o).normalize();for(var x=0,R=_.length;R>x;x++)E=_[x].clone(),o&&E.applyMatrix3(o).normalize(),g.vertexNormals.push(E);g.color.copy(T.color);for(var x=0,R=b.length;R>x;x++)y=b[x],g.vertexColors.push(y.clone());g.materialIndex=T.materialIndex+i,g.centroid.copy(T.centroid),r&&g.centroid.applyMatrix4(r),c.push(g)}for(p=0,f=d.length;f>p;p++){for(var w=d[p],H=[],x=0,R=w.length;R>x;x++)H.push(new THREE.Vector2(w[x].x,w[x].y));u.push(H)}},removeMaterials:function(e,t){for(var i={},r=0,o=t.length;o>r;r++)i[t[r]]=!0;for(var n,a=[],r=0,o=e.faces.length;o>r;r++)n=e.faces[r],n.materialIndex in i||a.push(n);e.faces=a},randomPointInTriangle:function(){var e=new THREE.Vector3;return function(t,i,r){var o=new THREE.Vector3,n=THREE.Math.random16(),a=THREE.Math.random16();n+a>1&&(n=1-n,a=1-a);var s=1-n-a;return o.copy(t),o.multiplyScalar(n),e.copy(i),e.multiplyScalar(a),o.add(e),e.copy(r),e.multiplyScalar(s),o.add(e),o}}(),randomPointInFace:function(e,t,i){var r,o,n,a;if(e instanceof THREE.Face3)return r=t.vertices[e.a],o=t.vertices[e.b],n=t.vertices[e.c],THREE.GeometryUtils.randomPointInTriangle(r,o,n);if(e instanceof THREE.Face4){r=t.vertices[e.a],o=t.vertices[e.b],n=t.vertices[e.c],a=t.vertices[e.d];var s,l;i?e._area1&&e._area2?(s=e._area1,l=e._area2):(s=THREE.GeometryUtils.triangleArea(r,o,a),l=THREE.GeometryUtils.triangleArea(o,n,a),e._area1=s,e._area2=l):(s=THREE.GeometryUtils.triangleArea(r,o,a),l=THREE.GeometryUtils.triangleArea(o,n,a));var c=THREE.Math.random16()*(s+l);return s>c?THREE.GeometryUtils.randomPointInTriangle(r,o,a):THREE.GeometryUtils.randomPointInTriangle(o,n,a)}},randomPointsInGeometry:function(e,t){function i(e){function t(i,r){if(i>r)return i;var o=i+Math.floor((r-i)/2);return p[o]>e?t(i,o-1):p[o]<e?t(o+1,r):o}var i=t(0,p.length-1);return i}var r,o,n,a,s,l,c=e.faces,h=e.vertices,u=c.length,d=0,p=[];for(o=0;u>o;o++)r=c[o],r instanceof THREE.Face3?(n=h[r.a],a=h[r.b],s=h[r.c],r._area=THREE.GeometryUtils.triangleArea(n,a,s)):r instanceof THREE.Face4&&(n=h[r.a],a=h[r.b],s=h[r.c],l=h[r.d],r._area1=THREE.GeometryUtils.triangleArea(n,a,l),r._area2=THREE.GeometryUtils.triangleArea(a,s,l),r._area=r._area1+r._area2),d+=r._area,p[o]=d;var f,m,v=[],g={};for(o=0;t>o;o++)f=THREE.Math.random16()*d,m=i(f),v[o]=THREE.GeometryUtils.randomPointInFace(c[m],e,!0),g[m]?g[m]+=1:g[m]=1;return v},triangleArea:function(){var e=new THREE.Vector3,t=new THREE.Vector3;return function(i,r,o){return e.subVectors(r,i),t.subVectors(o,i),e.cross(t),.5*e.length()}}(),center:function(e){e.computeBoundingBox();var t=e.boundingBox,i=new THREE.Vector3;return i.addVectors(t.min,t.max),i.multiplyScalar(-.5),e.applyMatrix((new THREE.Matrix4).makeTranslation(i.x,i.y,i.z)),e.computeBoundingBox(),i},triangulateQuads:function(e){var t,i,r,o,n=[],a=[],s=[];for(t=0,i=e.faceUvs.length;i>t;t++)a[t]=[];for(t=0,i=e.faceVertexUvs.length;i>t;t++)s[t]=[];for(t=0,i=e.faces.length;i>t;t++){var l=e.faces[t];if(l instanceof THREE.Face4){var c=l.a,h=l.b,u=l.c,d=l.d,p=new THREE.Face3,f=new THREE.Face3;for(p.color.copy(l.color),f.color.copy(l.color),p.materialIndex=l.materialIndex,f.materialIndex=l.materialIndex,p.a=c,p.b=h,p.c=d,f.a=h,f.b=u,f.c=d,4===l.vertexColors.length&&(p.vertexColors[0]=l.vertexColors[0].clone(),p.vertexColors[1]=l.vertexColors[1].clone(),p.vertexColors[2]=l.vertexColors[3].clone(),f.vertexColors[0]=l.vertexColors[1].clone(),f.vertexColors[1]=l.vertexColors[2].clone(),f.vertexColors[2]=l.vertexColors[3].clone()),n.push(p,f),r=0,o=e.faceVertexUvs.length;o>r;r++)if(e.faceVertexUvs[r].length){var m=e.faceVertexUvs[r][t],v=m[0],g=m[1],E=m[2],y=m[3],T=[v.clone(),g.clone(),y.clone()],_=[g.clone(),E.clone(),y.clone()];s[r].push(T,_)}for(r=0,o=e.faceUvs.length;o>r;r++)if(e.faceUvs[r].length){var b=e.faceUvs[r][t];a[r].push(b,b)}}else{for(n.push(l),r=0,o=e.faceUvs.length;o>r;r++)a[r].push(e.faceUvs[r][t]);for(r=0,o=e.faceVertexUvs.length;o>r;r++)s[r].push(e.faceVertexUvs[r][t])}}e.faces=n,e.faceUvs=a,e.faceVertexUvs=s,e.computeCentroids(),e.computeFaceNormals(),e.computeVertexNormals(),e.hasTangents&&e.computeTangents()},setMaterialIndex:function(e,t,i,r){for(var o=e.faces,n=i||0,a=r||o.length-1,s=n;a>=s;s++)o[s].materialIndex=t}};