THREE.Geometry=function(){this.id=THREE.GeometryIdCount++,this.uuid=THREE.Math.generateUUID(),this.name="",this.vertices=[],this.colors=[],this.normals=[],this.faces=[],this.faceUvs=[[]],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphColors=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.hasTangents=!1,this.dynamic=!0,this.verticesNeedUpdate=!1,this.elementsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.tangentsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.buffersNeedUpdate=!1},THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(e){for(var t=(new THREE.Matrix3).getNormalMatrix(e),i=0,r=this.vertices.length;r>i;i++){var o=this.vertices[i];o.applyMatrix4(e)}for(var i=0,r=this.faces.length;r>i;i++){var n=this.faces[i];n.normal.applyMatrix3(t).normalize();for(var a=0,s=n.vertexNormals.length;s>a;a++)n.vertexNormals[a].applyMatrix3(t).normalize();n.centroid.applyMatrix4(e)}this.boundingBox instanceof THREE.Box3&&this.computeBoundingBox(),this.boundingSphere instanceof THREE.Sphere&&this.computeBoundingSphere()},computeCentroids:function(){var e,t,i;for(e=0,t=this.faces.length;t>e;e++)i=this.faces[e],i.centroid.set(0,0,0),i instanceof THREE.Face3?(i.centroid.add(this.vertices[i.a]),i.centroid.add(this.vertices[i.b]),i.centroid.add(this.vertices[i.c]),i.centroid.divideScalar(3)):i instanceof THREE.Face4&&(i.centroid.add(this.vertices[i.a]),i.centroid.add(this.vertices[i.b]),i.centroid.add(this.vertices[i.c]),i.centroid.add(this.vertices[i.d]),i.centroid.divideScalar(4))},computeFaceNormals:function(){for(var e=new THREE.Vector3,t=new THREE.Vector3,i=0,r=this.faces.length;r>i;i++){var o=this.faces[i],n=this.vertices[o.a],a=this.vertices[o.b],s=this.vertices[o.c];e.subVectors(s,a),t.subVectors(n,a),e.cross(t),e.normalize(),o.normal.copy(e)}},computeVertexNormals:function(e){var t,i,r,o,n,a;if(void 0===this.__tmpVertices){for(this.__tmpVertices=new Array(this.vertices.length),a=this.__tmpVertices,t=0,i=this.vertices.length;i>t;t++)a[t]=new THREE.Vector3;for(r=0,o=this.faces.length;o>r;r++)n=this.faces[r],n instanceof THREE.Face3?n.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]:n instanceof THREE.Face4&&(n.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3])}else for(a=this.__tmpVertices,t=0,i=this.vertices.length;i>t;t++)a[t].set(0,0,0);if(e){var s,l,c,h,u=new THREE.Vector3,d=new THREE.Vector3,p=new THREE.Vector3,f=new THREE.Vector3,m=new THREE.Vector3;for(r=0,o=this.faces.length;o>r;r++)n=this.faces[r],n instanceof THREE.Face3?(s=this.vertices[n.a],l=this.vertices[n.b],c=this.vertices[n.c],u.subVectors(c,l),d.subVectors(s,l),u.cross(d),a[n.a].add(u),a[n.b].add(u),a[n.c].add(u)):n instanceof THREE.Face4&&(s=this.vertices[n.a],l=this.vertices[n.b],c=this.vertices[n.c],h=this.vertices[n.d],p.subVectors(h,l),d.subVectors(s,l),p.cross(d),a[n.a].add(p),a[n.b].add(p),a[n.d].add(p),f.subVectors(h,c),m.subVectors(l,c),f.cross(m),a[n.b].add(f),a[n.c].add(f),a[n.d].add(f))}else for(r=0,o=this.faces.length;o>r;r++)n=this.faces[r],n instanceof THREE.Face3?(a[n.a].add(n.normal),a[n.b].add(n.normal),a[n.c].add(n.normal)):n instanceof THREE.Face4&&(a[n.a].add(n.normal),a[n.b].add(n.normal),a[n.c].add(n.normal),a[n.d].add(n.normal));for(t=0,i=this.vertices.length;i>t;t++)a[t].normalize();for(r=0,o=this.faces.length;o>r;r++)n=this.faces[r],n instanceof THREE.Face3?(n.vertexNormals[0].copy(a[n.a]),n.vertexNormals[1].copy(a[n.b]),n.vertexNormals[2].copy(a[n.c])):n instanceof THREE.Face4&&(n.vertexNormals[0].copy(a[n.a]),n.vertexNormals[1].copy(a[n.b]),n.vertexNormals[2].copy(a[n.c]),n.vertexNormals[3].copy(a[n.d]))},computeMorphNormals:function(){var e,t,i,r,o;for(i=0,r=this.faces.length;r>i;i++)for(o=this.faces[i],o.__originalFaceNormal?o.__originalFaceNormal.copy(o.normal):o.__originalFaceNormal=o.normal.clone(),o.__originalVertexNormals||(o.__originalVertexNormals=[]),e=0,t=o.vertexNormals.length;t>e;e++)o.__originalVertexNormals[e]?o.__originalVertexNormals[e].copy(o.vertexNormals[e]):o.__originalVertexNormals[e]=o.vertexNormals[e].clone();var n=new THREE.Geometry;for(n.faces=this.faces,e=0,t=this.morphTargets.length;t>e;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var a,s,l=this.morphNormals[e].faceNormals,c=this.morphNormals[e].vertexNormals;for(i=0,r=this.faces.length;r>i;i++)o=this.faces[i],a=new THREE.Vector3,s=o instanceof THREE.Face3?{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3}:{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3,d:new THREE.Vector3},l.push(a),c.push(s)}var h=this.morphNormals[e];n.vertices=this.morphTargets[e].vertices,n.computeFaceNormals(),n.computeVertexNormals();var a,s;for(i=0,r=this.faces.length;r>i;i++)o=this.faces[i],a=h.faceNormals[i],s=h.vertexNormals[i],a.copy(o.normal),o instanceof THREE.Face3?(s.a.copy(o.vertexNormals[0]),s.b.copy(o.vertexNormals[1]),s.c.copy(o.vertexNormals[2])):(s.a.copy(o.vertexNormals[0]),s.b.copy(o.vertexNormals[1]),s.c.copy(o.vertexNormals[2]),s.d.copy(o.vertexNormals[3]))}for(i=0,r=this.faces.length;r>i;i++)o=this.faces[i],o.normal=o.__originalFaceNormal,o.vertexNormals=o.__originalVertexNormals},computeTangents:function(){function e(e,t,i,r,o,n,a){c=e.vertices[t],h=e.vertices[i],u=e.vertices[r],d=l[o],p=l[n],f=l[a],m=h.x-c.x,g=u.x-c.x,v=h.y-c.y,E=u.y-c.y,y=h.z-c.z,T=u.z-c.z,_=p.x-d.x,b=f.x-d.x,x=p.y-d.y,R=f.y-d.y,w=1/(_*R-b*x),D.set((R*m-x*g)*w,(R*v-x*E)*w,(R*y-x*T)*w),L.set((_*g-b*m)*w,(_*E-b*v)*w,(_*T-b*y)*w),C[t].add(D),C[i].add(D),C[r].add(D),A[t].add(L),A[i].add(L),A[r].add(L)}var t,i,r,o,n,a,s,l,c,h,u,d,p,f,m,g,v,E,y,T,_,b,x,R,w,H,S,M,C=[],A=[],D=new THREE.Vector3,L=new THREE.Vector3,P=new THREE.Vector3,N=new THREE.Vector3,I=new THREE.Vector3;for(r=0,o=this.vertices.length;o>r;r++)C[r]=new THREE.Vector3,A[r]=new THREE.Vector3;for(t=0,i=this.faces.length;i>t;t++)s=this.faces[t],l=this.faceVertexUvs[0][t],s instanceof THREE.Face3?e(this,s.a,s.b,s.c,0,1,2):s instanceof THREE.Face4&&(e(this,s.a,s.b,s.d,0,1,3),e(this,s.b,s.c,s.d,1,2,3));var F=["a","b","c","d"];for(t=0,i=this.faces.length;i>t;t++)for(s=this.faces[t],n=0;n<s.vertexNormals.length;n++)I.copy(s.vertexNormals[n]),a=s[F[n]],H=C[a],P.copy(H),P.sub(I.multiplyScalar(I.dot(H))).normalize(),N.crossVectors(s.vertexNormals[n],H),S=N.dot(A[a]),M=0>S?-1:1,s.vertexTangents[n]=new THREE.Vector4(P.x,P.y,P.z,M);this.hasTangents=!0},computeLineDistances:function(){for(var e=0,t=this.vertices,i=0,r=t.length;r>i;i++)i>0&&(e+=t[i].distanceTo(t[i-1])),this.lineDistances[i]=e},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere),this.boundingSphere.setFromPoints(this.vertices)},mergeVertices:function(){var e,t,i,r,o,n,a,s,l,c={},h=[],u=[],d=4,p=Math.pow(10,d);for(this.__tmpVertices=void 0,i=0,r=this.vertices.length;r>i;i++)e=this.vertices[i],t=Math.round(e.x*p)+"_"+Math.round(e.y*p)+"_"+Math.round(e.z*p),void 0===c[t]?(c[t]=i,h.push(this.vertices[i]),u[i]=h.length-1):u[i]=u[c[t]];var f=[];for(i=0,r=this.faces.length;r>i;i++)if(o=this.faces[i],o instanceof THREE.Face3){o.a=u[o.a],o.b=u[o.b],o.c=u[o.c],n=[o.a,o.b,o.c];for(var m=-1,g=0;3>g;g++)if(n[g]==n[(g+1)%3]){m=g,f.push(i);break}}else if(o instanceof THREE.Face4){o.a=u[o.a],o.b=u[o.b],o.c=u[o.c],o.d=u[o.d],n=[o.a,o.b,o.c,o.d];for(var m=-1,g=0;4>g;g++)n[g]==n[(g+1)%4]&&(m>=0&&f.push(i),m=g);if(m>=0){n.splice(m,1);var v=new THREE.Face3(n[0],n[1],n[2],o.normal,o.color,o.materialIndex);for(a=0,s=this.faceVertexUvs.length;s>a;a++)l=this.faceVertexUvs[a][i],l&&l.splice(m,1);o.vertexNormals&&o.vertexNormals.length>0&&(v.vertexNormals=o.vertexNormals,v.vertexNormals.splice(m,1)),o.vertexColors&&o.vertexColors.length>0&&(v.vertexColors=o.vertexColors,v.vertexColors.splice(m,1)),this.faces[i]=v}}for(i=f.length-1;i>=0;i--)for(this.faces.splice(i,1),a=0,s=this.faceVertexUvs.length;s>a;a++)this.faceVertexUvs[a].splice(i,1);var E=this.vertices.length-h.length;return this.vertices=h,E},clone:function(){for(var e=new THREE.Geometry,t=this.vertices,i=0,r=t.length;r>i;i++)e.vertices.push(t[i].clone());for(var o=this.faces,i=0,r=o.length;r>i;i++)e.faces.push(o[i].clone());for(var n=this.faceVertexUvs[0],i=0,r=n.length;r>i;i++){for(var a=n[i],s=[],l=0,c=a.length;c>l;l++)s.push(new THREE.Vector2(a[l].x,a[l].y));e.faceVertexUvs[0].push(s)}return e},dispose:function(){this.dispatchEvent({type:"dispose"})}},THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype),THREE.GeometryIdCount=0;