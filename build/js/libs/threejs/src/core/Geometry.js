THREE.Geometry=function(){this.id=THREE.GeometryIdCount++;this.uuid=THREE.Math.generateUUID();this.name="";this.vertices=[];this.colors=[];this.normals=[];this.faces=[];this.faceUvs=[[]];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingBox=null;this.boundingSphere=null;this.hasTangents=!1;this.dynamic=!0;this.verticesNeedUpdate=!1;this.elementsNeedUpdate=!1;this.uvsNeedUpdate=!1;this.normalsNeedUpdate=!1;this.tangentsNeedUpdate=!1;this.colorsNeedUpdate=!1;this.lineDistancesNeedUpdate=!1;this.buffersNeedUpdate=!1};THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(e){var t=(new THREE.Matrix3).getNormalMatrix(e);for(var i=0,r=this.vertices.length;r>i;i++){var n=this.vertices[i];n.applyMatrix4(e)}for(var i=0,r=this.faces.length;r>i;i++){var o=this.faces[i];o.normal.applyMatrix3(t).normalize();for(var a=0,s=o.vertexNormals.length;s>a;a++)o.vertexNormals[a].applyMatrix3(t).normalize();o.centroid.applyMatrix4(e)}if(this.boundingBox instanceof THREE.Box3)this.computeBoundingBox();if(this.boundingSphere instanceof THREE.Sphere)this.computeBoundingSphere()},computeCentroids:function(){var e,t,i;for(e=0,t=this.faces.length;t>e;e++){i=this.faces[e];i.centroid.set(0,0,0);if(i instanceof THREE.Face3){i.centroid.add(this.vertices[i.a]);i.centroid.add(this.vertices[i.b]);i.centroid.add(this.vertices[i.c]);i.centroid.divideScalar(3)}else if(i instanceof THREE.Face4){i.centroid.add(this.vertices[i.a]);i.centroid.add(this.vertices[i.b]);i.centroid.add(this.vertices[i.c]);i.centroid.add(this.vertices[i.d]);i.centroid.divideScalar(4)}}},computeFaceNormals:function(){var e=new THREE.Vector3,t=new THREE.Vector3;for(var i=0,r=this.faces.length;r>i;i++){var n=this.faces[i];var o=this.vertices[n.a];var a=this.vertices[n.b];var s=this.vertices[n.c];e.subVectors(s,a);t.subVectors(o,a);e.cross(t);e.normalize();n.normal.copy(e)}},computeVertexNormals:function(e){var t,i,r,n,o,a;if(void 0===this.__tmpVertices){this.__tmpVertices=new Array(this.vertices.length);a=this.__tmpVertices;for(t=0,i=this.vertices.length;i>t;t++)a[t]=new THREE.Vector3;for(r=0,n=this.faces.length;n>r;r++){o=this.faces[r];if(o instanceof THREE.Face3)o.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];else if(o instanceof THREE.Face4)o.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]}}else{a=this.__tmpVertices;for(t=0,i=this.vertices.length;i>t;t++)a[t].set(0,0,0)}if(e){var s,l,c,h;var u=new THREE.Vector3,f=new THREE.Vector3,d=new THREE.Vector3,p=new THREE.Vector3,m=new THREE.Vector3;for(r=0,n=this.faces.length;n>r;r++){o=this.faces[r];if(o instanceof THREE.Face3){s=this.vertices[o.a];l=this.vertices[o.b];c=this.vertices[o.c];u.subVectors(c,l);f.subVectors(s,l);u.cross(f);a[o.a].add(u);a[o.b].add(u);a[o.c].add(u)}else if(o instanceof THREE.Face4){s=this.vertices[o.a];l=this.vertices[o.b];c=this.vertices[o.c];h=this.vertices[o.d];d.subVectors(h,l);f.subVectors(s,l);d.cross(f);a[o.a].add(d);a[o.b].add(d);a[o.d].add(d);p.subVectors(h,c);m.subVectors(l,c);p.cross(m);a[o.b].add(p);a[o.c].add(p);a[o.d].add(p)}}}else for(r=0,n=this.faces.length;n>r;r++){o=this.faces[r];if(o instanceof THREE.Face3){a[o.a].add(o.normal);a[o.b].add(o.normal);a[o.c].add(o.normal)}else if(o instanceof THREE.Face4){a[o.a].add(o.normal);a[o.b].add(o.normal);a[o.c].add(o.normal);a[o.d].add(o.normal)}}for(t=0,i=this.vertices.length;i>t;t++)a[t].normalize();for(r=0,n=this.faces.length;n>r;r++){o=this.faces[r];if(o instanceof THREE.Face3){o.vertexNormals[0].copy(a[o.a]);o.vertexNormals[1].copy(a[o.b]);o.vertexNormals[2].copy(a[o.c])}else if(o instanceof THREE.Face4){o.vertexNormals[0].copy(a[o.a]);o.vertexNormals[1].copy(a[o.b]);o.vertexNormals[2].copy(a[o.c]);o.vertexNormals[3].copy(a[o.d])}}},computeMorphNormals:function(){var e,t,i,r,n;for(i=0,r=this.faces.length;r>i;i++){n=this.faces[i];if(!n.__originalFaceNormal)n.__originalFaceNormal=n.normal.clone();else n.__originalFaceNormal.copy(n.normal);if(!n.__originalVertexNormals)n.__originalVertexNormals=[];for(e=0,t=n.vertexNormals.length;t>e;e++)if(!n.__originalVertexNormals[e])n.__originalVertexNormals[e]=n.vertexNormals[e].clone();else n.__originalVertexNormals[e].copy(n.vertexNormals[e])}var o=new THREE.Geometry;o.faces=this.faces;for(e=0,t=this.morphTargets.length;t>e;e++){if(!this.morphNormals[e]){this.morphNormals[e]={};this.morphNormals[e].faceNormals=[];this.morphNormals[e].vertexNormals=[];var a=this.morphNormals[e].faceNormals;var s=this.morphNormals[e].vertexNormals;var l,c;for(i=0,r=this.faces.length;r>i;i++){n=this.faces[i];l=new THREE.Vector3;if(n instanceof THREE.Face3)c={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3};else c={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3,d:new THREE.Vector3};a.push(l);s.push(c)}}var h=this.morphNormals[e];o.vertices=this.morphTargets[e].vertices;o.computeFaceNormals();o.computeVertexNormals();var l,c;for(i=0,r=this.faces.length;r>i;i++){n=this.faces[i];l=h.faceNormals[i];c=h.vertexNormals[i];l.copy(n.normal);if(n instanceof THREE.Face3){c.a.copy(n.vertexNormals[0]);c.b.copy(n.vertexNormals[1]);c.c.copy(n.vertexNormals[2])}else{c.a.copy(n.vertexNormals[0]);c.b.copy(n.vertexNormals[1]);c.c.copy(n.vertexNormals[2]);c.d.copy(n.vertexNormals[3])}}}for(i=0,r=this.faces.length;r>i;i++){n=this.faces[i];n.normal=n.__originalFaceNormal;n.vertexNormals=n.__originalVertexNormals}},computeTangents:function(){function e(e,t,i,r,n,o,a){c=e.vertices[t];h=e.vertices[i];u=e.vertices[r];f=l[n];d=l[o];p=l[a];m=h.x-c.x;v=u.x-c.x;g=h.y-c.y;E=u.y-c.y;y=h.z-c.z;T=u.z-c.z;_=d.x-f.x;b=p.x-f.x;x=d.y-f.y;R=p.y-f.y;w=1/(_*R-b*x);D.set((R*m-x*v)*w,(R*g-x*E)*w,(R*y-x*T)*w);P.set((_*v-b*m)*w,(_*E-b*g)*w,(_*T-b*y)*w);C[t].add(D);C[i].add(D);C[r].add(D);A[t].add(P);A[i].add(P);A[r].add(P)}var t,i,r,n,o,a,s,l,c,h,u,f,d,p,m,v,g,E,y,T,_,b,x,R,w,H,S,M,C=[],A=[],D=new THREE.Vector3,P=new THREE.Vector3,L=new THREE.Vector3,N=new THREE.Vector3,k=new THREE.Vector3;for(r=0,n=this.vertices.length;n>r;r++){C[r]=new THREE.Vector3;A[r]=new THREE.Vector3}for(t=0,i=this.faces.length;i>t;t++){s=this.faces[t];l=this.faceVertexUvs[0][t];if(s instanceof THREE.Face3)e(this,s.a,s.b,s.c,0,1,2);else if(s instanceof THREE.Face4){e(this,s.a,s.b,s.d,0,1,3);e(this,s.b,s.c,s.d,1,2,3)}}var F=["a","b","c","d"];for(t=0,i=this.faces.length;i>t;t++){s=this.faces[t];for(o=0;o<s.vertexNormals.length;o++){k.copy(s.vertexNormals[o]);a=s[F[o]];H=C[a];L.copy(H);L.sub(k.multiplyScalar(k.dot(H))).normalize();N.crossVectors(s.vertexNormals[o],H);S=N.dot(A[a]);M=0>S?-1:1;s.vertexTangents[o]=new THREE.Vector4(L.x,L.y,L.z,M)}}this.hasTangents=!0},computeLineDistances:function(){var e=0;var t=this.vertices;for(var i=0,r=t.length;r>i;i++){if(i>0)e+=t[i].distanceTo(t[i-1]);this.lineDistances[i]=e}},computeBoundingBox:function(){if(null===this.boundingBox)this.boundingBox=new THREE.Box3;this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){if(null===this.boundingSphere)this.boundingSphere=new THREE.Sphere;this.boundingSphere.setFromPoints(this.vertices)},mergeVertices:function(){var e={};var t=[],i=[];var r,n;var o=4;var a=Math.pow(10,o);var s,l,c;var h,u,f,d;this.__tmpVertices=void 0;for(s=0,l=this.vertices.length;l>s;s++){r=this.vertices[s];n=Math.round(r.x*a)+"_"+Math.round(r.y*a)+"_"+Math.round(r.z*a);if(void 0===e[n]){e[n]=s;t.push(this.vertices[s]);i[s]=t.length-1}else i[s]=i[e[n]]}var p=[];for(s=0,l=this.faces.length;l>s;s++){c=this.faces[s];if(c instanceof THREE.Face3){c.a=i[c.a];c.b=i[c.b];c.c=i[c.c];h=[c.a,c.b,c.c];var m=-1;for(var v=0;3>v;v++)if(h[v]==h[(v+1)%3]){m=v;p.push(s);break}}else if(c instanceof THREE.Face4){c.a=i[c.a];c.b=i[c.b];c.c=i[c.c];c.d=i[c.d];h=[c.a,c.b,c.c,c.d];var m=-1;for(var v=0;4>v;v++)if(h[v]==h[(v+1)%4]){if(m>=0)p.push(s);m=v}if(m>=0){h.splice(m,1);var g=new THREE.Face3(h[0],h[1],h[2],c.normal,c.color,c.materialIndex);for(u=0,f=this.faceVertexUvs.length;f>u;u++){d=this.faceVertexUvs[u][s];if(d)d.splice(m,1)}if(c.vertexNormals&&c.vertexNormals.length>0){g.vertexNormals=c.vertexNormals;g.vertexNormals.splice(m,1)}if(c.vertexColors&&c.vertexColors.length>0){g.vertexColors=c.vertexColors;g.vertexColors.splice(m,1)}this.faces[s]=g}}}for(s=p.length-1;s>=0;s--){this.faces.splice(s,1);for(u=0,f=this.faceVertexUvs.length;f>u;u++)this.faceVertexUvs[u].splice(s,1)}var E=this.vertices.length-t.length;this.vertices=t;return E},clone:function(){var e=new THREE.Geometry;var t=this.vertices;for(var i=0,r=t.length;r>i;i++)e.vertices.push(t[i].clone());var n=this.faces;for(var i=0,r=n.length;r>i;i++)e.faces.push(n[i].clone());var o=this.faceVertexUvs[0];for(var i=0,r=o.length;r>i;i++){var a=o[i],s=[];for(var l=0,c=a.length;c>l;l++)s.push(new THREE.Vector2(a[l].x,a[l].y));e.faceVertexUvs[0].push(s)}return e},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.EventDispatcher.prototype.apply(THREE.Geometry.prototype);THREE.GeometryIdCount=0;