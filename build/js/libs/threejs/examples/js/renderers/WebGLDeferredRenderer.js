THREE.WebGLDeferredRenderer=function(e){function t(e){var t=e.material.uniforms;if(t["matProjInverse"])t["matProjInverse"].value=f.projectionMatrixInverse;if(t["matView"])t["matView"].value=f.matrixWorldInverse;var i=e.userData.originalLight;if(i){e.visible=i.visible;if(i instanceof THREE.PointLight)X(e);else if(i instanceof THREE.SpotLight)q(e);else if(i instanceof THREE.DirectionalLight)Z(e);else if(i instanceof THREE.HemisphereLight)$(e);else if(i instanceof THREE.AreaLight)et(e)}}var i=this;var r=void 0!==e.width?e.width:800;var n=void 0!==e.height?e.height:600;var o=void 0!==e.scale?e.scale:1;var a=Math.floor(o*r);var s=Math.floor(o*n);var l=void 0!==e.brightness?e.brightness:1;var h=void 0!==e.tonemapping?e.tonemapping:THREE.SimpleOperator;var c=void 0!==e.antialias?e.antialias:!1;this.renderer=e.renderer;if(void 0===this.renderer){this.renderer=new THREE.WebGLRenderer({alpha:!1,antialias:!1});this.renderer.setSize(r,n);this.renderer.setClearColorHex(0,0);this.renderer.autoClear=!1}this.domElement=this.renderer.domElement;var u=this.renderer.context;var f=null;var d=new THREE.Vector3;var p=new THREE.Vector3;var m=new THREE.Vector3;var v=new THREE.Vector3;var g=new THREE.Vector3;var E=new THREE.Vector3;var y=new THREE.SphereGeometry(1,16,8);var T=new THREE.PlaneGeometry(2,2);var _=new THREE.Color(0);var b=THREE.ShaderDeferred["color"];var x=THREE.ShaderDeferred["normalDepth"];var R=THREE.ShaderDeferred["emissiveLight"];var w=THREE.ShaderDeferred["pointLight"];var H=THREE.ShaderDeferred["spotLight"];var S=THREE.ShaderDeferred["directionalLight"];var M=THREE.ShaderDeferred["hemisphereLight"];var C=THREE.ShaderDeferred["areaLight"];var A=THREE.ShaderDeferred["composite"];var D,P,L;var k,N,I,O;var F;var z,V;var B=[];var U=new THREE.ShaderMaterial;U.visible=!1;var j=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(x.uniforms),vertexShader:x.vertexShader,fragmentShader:x.fragmentShader,blending:THREE.NoBlending});var W=function(e){if(e.material instanceof THREE.MeshFaceMaterial){var t=[];var i=[];var r=e.material.materials;for(var n=0,o=r.length;o>n;n++){var a=G(r[n]);if(a.transparent){t.push(U);i.push(U)}else{t.push(a.colorMaterial);i.push(a.normalDepthMaterial)}}e.userData.colorMaterial=new THREE.MeshFaceMaterial(t);e.userData.normalDepthMaterial=new THREE.MeshFaceMaterial(i)}else{var a=G(e.material);e.userData.colorMaterial=a.colorMaterial;e.userData.normalDepthMaterial=a.normalDepthMaterial;e.userData.transparent=a.transparent}};var G=function(e){var t={};var i=THREE.UniformsUtils.clone(b.uniforms);var r={USE_MAP:!!e.map,USE_ENVMAP:!!e.envMap,GAMMA_INPUT:!0};var n=new THREE.ShaderMaterial({fragmentShader:b.fragmentShader,vertexShader:b.vertexShader,uniforms:i,defines:r,shading:e.shading});if(e instanceof THREE.MeshBasicMaterial){var o=_;var l=e.color}else{var o=e.color;var l=void 0!==e.emissive?e.emissive:_}var h=void 0!==e.specular?e.specular:_;var c=void 0!==e.shininess?e.shininess:1;var u=void 0!==e.wrapAround?e.wrapAround?-1:1:1;var f=void 0!==e.metal?e.metal?1:-1:-1;i.emissive.value.copyGammaToLinear(l);i.diffuse.value.copyGammaToLinear(o);i.specular.value.copyGammaToLinear(h);i.shininess.value=c;i.wrapAround.value=u;i.additiveSpecular.value=f;i.map.value=e.map;if(e.envMap){i.envMap.value=e.envMap;i.useRefract.value=e.envMap.mapping instanceof THREE.CubeRefractionMapping;i.refractionRatio.value=e.refractionRatio;i.combine.value=e.combine;i.reflectivity.value=e.reflectivity;i.flipEnvMap.value=e.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;i.samplerNormalDepth.value=compNormalDepth.renderTarget2;i.viewWidth.value=a;i.viewHeight.value=s;B.push({material:n})}n.vertexColors=e.vertexColors;n.morphTargets=e.morphTargets;n.morphNormals=e.morphNormals;n.skinning=e.skinning;n.alphaTest=e.alphaTest;n.wireframe=e.wireframe;var d;if(e.map)d=e.map;else if(e.specularMap)d=e.specularMap;else if(e.normalMap)d=e.normalMap;else if(e.bumpMap)d=e.bumpMap;if(void 0!==d){var p=d.offset;var m=d.repeat;i.offsetRepeat.value.set(p.x,p.y,m.x,m.y)}t.colorMaterial=n;if(e.morphTargets||e.skinning||e.bumpMap){var i=THREE.UniformsUtils.clone(x.uniforms);var r={USE_BUMPMAP:!!e.bumpMap};var v=new THREE.ShaderMaterial({uniforms:i,vertexShader:x.vertexShader,fragmentShader:x.fragmentShader,shading:e.shading,defines:r,blending:THREE.NoBlending});v.morphTargets=e.morphTargets;v.morphNormals=e.morphNormals;v.skinning=e.skinning;if(e.bumpMap){i.bumpMap.value=e.bumpMap;i.bumpScale.value=e.bumpScale;var p=e.bumpMap.offset;var m=e.bumpMap.repeat;i.offsetRepeat.value.set(p.x,p.y,m.x,m.y)}}else var v=j.clone();v.wireframe=e.wireframe;v.vertexColors=e.vertexColors;t.normalDepthMaterial=v;t.transparent=e.transparent;return t};var X=function(e){var t=e.userData.originalLight;var i=e.material.uniforms;var r=t.distance;if(r>0){e.scale.set(1,1,1).multiplyScalar(r);i["lightRadius"].value=r;d.getPositionFromMatrix(t.matrixWorld);d.applyMatrix4(f.matrixWorldInverse);i["lightPositionVS"].value.copy(d);e.position.getPositionFromMatrix(t.matrixWorld)}else i["lightRadius"].value=1/0;var n=t.intensity*t.intensity;i["lightIntensity"].value=n;i["lightColor"].value.copyGammaToLinear(t.color)};var Y=function(e){var t=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(w.uniforms),vertexShader:w.vertexShader,fragmentShader:w.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,transparent:!0,side:THREE.BackSide});var i;if(e.distance>0)i=y;else{i=T;t.depthTest=!1;t.side=THREE.FrontSide}t.uniforms["viewWidth"].value=a;t.uniforms["viewHeight"].value=s;t.uniforms["samplerColor"].value=D.renderTarget2;t.uniforms["samplerNormalDepth"].value=compNormalDepth.renderTarget2;var r=new THREE.Mesh(i,t);r.userData.originalLight=e;B.push({material:t});X(r);return r};var q=function(e){var t=e.userData.originalLight;var i=e.material.uniforms;var r=f.matrixWorldInverse;var n=t.matrixWorld;d.getPositionFromMatrix(n);d.applyMatrix4(r);p.getPositionFromMatrix(n);m.getPositionFromMatrix(t.target.matrixWorld);p.sub(m);p.normalize();p.transformDirection(r);i["lightPositionVS"].value.copy(d);i["lightDirectionVS"].value.copy(p);i["lightAngle"].value=t.angle;i["lightDistance"].value=t.distance;var o=t.intensity*t.intensity;i["lightIntensity"].value=o;i["lightColor"].value.copyGammaToLinear(t.color)};var K=function(e){var t=THREE.UniformsUtils.clone(H.uniforms);var i=new THREE.ShaderMaterial({uniforms:t,vertexShader:H.vertexShader,fragmentShader:H.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,depthTest:!1,transparent:!0});t["viewWidth"].value=a;t["viewHeight"].value=s;t["samplerColor"].value=D.renderTarget2;t["samplerNormalDepth"].value=compNormalDepth.renderTarget2;var r=new THREE.Mesh(T,i);r.userData.originalLight=e;B.push({material:i});q(r);return r};var Z=function(e){var t=e.userData.originalLight;var i=e.material.uniforms;p.getPositionFromMatrix(t.matrixWorld);m.getPositionFromMatrix(t.target.matrixWorld);p.sub(m);p.normalize();p.transformDirection(f.matrixWorldInverse);i["lightDirectionVS"].value.copy(p);var r=t.intensity*t.intensity;i["lightIntensity"].value=r;i["lightColor"].value.copyGammaToLinear(t.color)};var Q=function(e){var t=THREE.UniformsUtils.clone(S.uniforms);var i=new THREE.ShaderMaterial({uniforms:t,vertexShader:S.vertexShader,fragmentShader:S.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,depthTest:!1,transparent:!0});t["viewWidth"].value=a;t["viewHeight"].value=s;t["samplerColor"].value=D.renderTarget2;t["samplerNormalDepth"].value=compNormalDepth.renderTarget2;var r=new THREE.Mesh(T,i);r.userData.originalLight=e;B.push({material:i});Z(r);return r};var $=function(e){var t=e.userData.originalLight;var i=e.material.uniforms;p.getPositionFromMatrix(t.matrixWorld);p.normalize();p.transformDirection(f.matrixWorldInverse);i["lightDirectionVS"].value.copy(p);var r=t.intensity*t.intensity;i["lightIntensity"].value=r;i["lightColorSky"].value.copyGammaToLinear(t.color);i["lightColorGround"].value.copyGammaToLinear(t.groundColor)};var J=function(e){var t=THREE.UniformsUtils.clone(M.uniforms);var i=new THREE.ShaderMaterial({uniforms:t,vertexShader:M.vertexShader,fragmentShader:M.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,depthTest:!1,transparent:!0});t["viewWidth"].value=a;t["viewHeight"].value=s;t["samplerColor"].value=D.renderTarget2;t["samplerNormalDepth"].value=compNormalDepth.renderTarget2;var r=new THREE.Mesh(T,i);r.userData.originalLight=e;B.push({material:i});$(r);return r};var et=function(e){var t=e.userData.originalLight;var i=e.material.uniforms;var r=t.matrixWorld;var n=f.matrixWorldInverse;d.getPositionFromMatrix(r);d.applyMatrix4(n);i["lightPositionVS"].value.copy(d);v.copy(t.right);v.transformDirection(r);v.transformDirection(n);g.copy(t.normal);g.transformDirection(r);g.transformDirection(n);E.crossVectors(v,g);E.normalize();i["lightRightVS"].value.copy(v);i["lightNormalVS"].value.copy(g);i["lightUpVS"].value.copy(E);i["lightWidth"].value=t.width;i["lightHeight"].value=t.height;i["constantAttenuation"].value=t.constantAttenuation;i["linearAttenuation"].value=t.linearAttenuation;i["quadraticAttenuation"].value=t.quadraticAttenuation;var o=t.intensity*t.intensity;i["lightIntensity"].value=o;i["lightColor"].value.copyGammaToLinear(t.color)};var tt=function(e){var t=THREE.UniformsUtils.clone(C.uniforms);var i=new THREE.ShaderMaterial({uniforms:t,vertexShader:C.vertexShader,fragmentShader:C.fragmentShader,blending:THREE.AdditiveBlending,depthWrite:!1,depthTest:!1,transparent:!0});t["viewWidth"].value=a;t["viewHeight"].value=s;t["samplerColor"].value=D.renderTarget2;t["samplerNormalDepth"].value=compNormalDepth.renderTarget2;var r=new THREE.Mesh(T,i);r.userData.originalLight=e;B.push({material:i});et(r);return r};var it=function(){var e=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.clone(R.uniforms),vertexShader:R.vertexShader,fragmentShader:R.fragmentShader,depthTest:!1,depthWrite:!1,blending:THREE.NoBlending});e.uniforms["viewWidth"].value=a;e.uniforms["viewHeight"].value=s;e.uniforms["samplerColor"].value=D.renderTarget2;var t=new THREE.Mesh(T,e);B.push({material:e});return t};var rt=function(e){if(!e.userData.deferredInitialized){if(e.material)W(e);if(e instanceof THREE.PointLight){var t=Y(e);if(e.distance>0)V.add(t);else z.add(t)}else if(e instanceof THREE.SpotLight){var t=K(e);z.add(t)}else if(e instanceof THREE.DirectionalLight){var t=Q(e);z.add(t)}else if(e instanceof THREE.HemisphereLight){var t=J(e);z.add(t)}else if(e instanceof THREE.AreaLight){var t=tt(e);z.add(t)}e.userData.deferredInitialized=!0}};var nt=function(e){if(e.material)if(e.userData.transparent)e.material=U;else e.material=e.userData.colorMaterial};var ot=function(e){if(e.material)if(e.userData.transparent)e.material=U;else e.material=e.userData.normalDepthMaterial};this.setAntialias=function(e){c=e;if(c){F.enabled=!0;O.renderToScreen=!1}else{F.enabled=!1;O.renderToScreen=!0}};this.getAntialias=function(){return c};this.addEffect=function(e,t,i){if(e.material&&e.uniforms){if(t)e.uniforms[t].value=compNormalDepth.renderTarget2;if(i)e.uniforms[i].value=D.renderTarget2;if(t||i)B.push({material:e.material,normalDepth:t,color:i})}L.insertPass(e,-1)};this.setScale=function(e){o=e;a=Math.floor(o*r);s=Math.floor(o*n);compNormalDepth.setSize(a,s);D.setSize(a,s);P.setSize(a,s);L.setSize(a,s);D.renderTarget2.shareDepthFrom=compNormalDepth.renderTarget2;P.renderTarget2.shareDepthFrom=compNormalDepth.renderTarget2;for(var t=0,i=B.length;i>t;t++){var l=B[t];var h=l.material;var c=h.uniforms;var u=void 0!==l.color?l.color:"samplerColor";var f=void 0!==l.normalDepth?l.normalDepth:"samplerNormalDepth";if(c[u])c[u].value=D.renderTarget2;if(c[f])c[f].value=compNormalDepth.renderTarget2;if(c["viewWidth"])c["viewWidth"].value=a;if(c["viewHeight"])c["viewHeight"].value=s}O.uniforms["samplerLight"].value=P.renderTarget2;F.uniforms["resolution"].value.set(1/r,1/n)};this.setSize=function(e,t){r=e;n=t;this.renderer.setSize(r,n);this.setScale(o)};this.render=function(e,i){if(!e.userData.lightSceneProxy){e.userData.lightSceneProxy=new THREE.Scene;e.userData.lightSceneFullscreen=new THREE.Scene;var r=it();e.userData.lightSceneFullscreen.add(r)}f=i;V=e.userData.lightSceneProxy;z=e.userData.lightSceneFullscreen;k.camera=f;passNormalDepth.camera=f;I.camera=f;N.camera=THREE.EffectComposer.camera;k.scene=e;passNormalDepth.scene=e;N.scene=z;I.scene=V;e.traverse(rt);e.autoUpdate=!1;e.updateMatrixWorld();e.traverse(ot);this.renderer.autoClearDepth=!0;this.renderer.autoClearStencil=!0;u.stencilOp(u.REPLACE,u.REPLACE,u.REPLACE);u.stencilFunc(u.ALWAYS,1,4294967295);u.clearStencil(0);compNormalDepth.render();u.stencilFunc(u.EQUAL,1,4294967295);u.stencilOp(u.KEEP,u.KEEP,u.KEEP);e.traverse(nt);this.renderer.autoClearDepth=!0;this.renderer.autoClearStencil=!1;D.render();this.renderer.autoClearDepth=!1;e.autoUpdate=!0;u.depthFunc(u.GEQUAL);f.projectionMatrixInverse.getInverse(f.projectionMatrix);for(var n=0,o=V.children.length;o>n;n++){var a=V.children[n];t(a)}for(var n=0,o=z.children.length;o>n;n++){var a=z.children[n];t(a)}P.render();this.renderer.autoClearDepth=!0;this.renderer.autoClearStencil=!0;u.depthFunc(u.LEQUAL);u.disable(u.STENCIL_TEST);L.render(.1)};var at=function(){var e={minFilter:THREE.NearestFilter,magFilter:THREE.LinearFilter,stencilBuffer:!0,format:THREE.RGBAFormat,type:THREE.FloatType};var t={minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,stencilBuffer:!0,format:THREE.RGBAFormat,type:THREE.FloatType};var o={minFilter:THREE.NearestFilter,magFilter:THREE.LinearFilter,stencilBuffer:!1,format:THREE.RGBFormat,type:THREE.UnsignedByteType};var u=new THREE.WebGLRenderTarget(a,s,t);var f=new THREE.WebGLRenderTarget(a,s,t);var d=new THREE.WebGLRenderTarget(a,s,e);var p=new THREE.WebGLRenderTarget(a,s,o);u.generateMipmaps=!1;f.generateMipmaps=!1;d.generateMipmaps=!1;p.generateMipmaps=!1;passNormalDepth=new THREE.RenderPass;passNormalDepth.clear=!0;compNormalDepth=new THREE.EffectComposer(i.renderer,f);compNormalDepth.addPass(passNormalDepth);k=new THREE.RenderPass;k.clear=!0;D=new THREE.EffectComposer(i.renderer,u);D.addPass(k);D.renderTarget2.shareDepthFrom=compNormalDepth.renderTarget2;N=new THREE.RenderPass;N.clear=!0;I=new THREE.RenderPass;I.clear=!1;P=new THREE.EffectComposer(i.renderer,d);P.addPass(N);P.addPass(I);P.renderTarget2.shareDepthFrom=compNormalDepth.renderTarget2;O=new THREE.ShaderPass(A);O.uniforms["samplerLight"].value=P.renderTarget2;O.uniforms["brightness"].value=l;O.material.blending=THREE.NoBlending;O.clear=!0;var m;switch(h){case THREE.SimpleOperator:m={TONEMAP_SIMPLE:!0};break;case THREE.LinearOperator:m={TONEMAP_LINEAR:!0};break;case THREE.ReinhardOperator:m={TONEMAP_REINHARD:!0};break;case THREE.FilmicOperator:m={TONEMAP_FILMIC:!0};break;case THREE.UnchartedOperator:m={TONEMAP_UNCHARTED:!0}}O.material.defines=m;F=new THREE.ShaderPass(THREE.FXAAShader);F.uniforms["resolution"].value.set(1/r,1/n);F.renderToScreen=!0;L=new THREE.EffectComposer(i.renderer,p);L.addPass(O);L.addPass(F);if(c){F.enabled=!0;O.renderToScreen=!1}else{F.enabled=!1;O.renderToScreen=!0}};at()};THREE.NoOperator=0;THREE.SimpleOperator=1;THREE.LinearOperator=2;THREE.ReinhardOperator=3;THREE.FilmicOperator=4;THREE.UnchartedOperator=5;