THREE.WebGLRenderer.ParticleRenderer=function(e,t){THREE.WebGLRenderer.Object3DRenderer.call(this,e,t)},THREE.WebGLRenderer.ParticleRenderer.prototype=Object.create(THREE.WebGLRenderer.Object3DRenderer.prototype),THREE.extend(THREE.WebGLRenderer.ParticleRenderer.prototype,{createBuffers:function(e){var t=this.renderer;e.__webglVertexBuffer=t.createBuffer(),e.__webglColorBuffer=t.createBuffer(),this.info.memory.geometries++},initBuffers:function(e,t){var i=e.vertices.length;e.__vertexArray=new Float32Array(3*i),e.__colorArray=new Float32Array(3*i),e.__sortArray=[],e.__webglParticleCount=i,this.initCustomAttributes(e,t)},setBuffers:function(e,t,i){var r,n,o,a,s,l,c,h,u,d,p,f,m=this.renderer,g=e.vertices,v=g.length,E=e.colors,y=E.length,T=e.__vertexArray,_=e.__colorArray,b=e.__sortArray,x=e.verticesNeedUpdate,R=(e.elementsNeedUpdate,e.colorsNeedUpdate),w=e.__webglCustomAttributesList,H=THREE.WebGLRenderer.ParticleRenderer._m1,S=THREE.WebGLRenderer.ParticleRenderer._v1;if(t.sortParticles){for(H.multiplyMatrices(i,t.matrixWorld),r=0;v>r;r++)o=g[r],S.copy(o),S.applyProjection(H),b[r]=[S.z,r];for(b.sort(this.numericalSort),r=0;v>r;r++)o=g[b[r][1]],a=3*r,T[a]=o.x,T[a+1]=o.y,T[a+2]=o.z;for(n=0;y>n;n++)a=3*n,l=E[b[n][1]],_[a]=l.r,_[a+1]=l.g,_[a+2]=l.b;if(w)for(c=0,h=w.length;h>c;c++)if(f=w[c],void 0===f.boundTo||"vertices"===f.boundTo)if(a=0,d=f.value.length,1===f.size)for(u=0;d>u;u++)s=b[u][1],f.array[u]=f.value[s];else if(2===f.size)for(u=0;d>u;u++)s=b[u][1],p=f.value[s],f.array[a]=p.x,f.array[a+1]=p.y,a+=2;else if(3===f.size)if("c"===f.type)for(u=0;d>u;u++)s=b[u][1],p=f.value[s],f.array[a]=p.r,f.array[a+1]=p.g,f.array[a+2]=p.b,a+=3;else for(u=0;d>u;u++)s=b[u][1],p=f.value[s],f.array[a]=p.x,f.array[a+1]=p.y,f.array[a+2]=p.z,a+=3;else if(4===f.size)for(u=0;d>u;u++)s=b[u][1],p=f.value[s],f.array[a]=p.x,f.array[a+1]=p.y,f.array[a+2]=p.z,f.array[a+3]=p.w,a+=4}else{if(x)for(r=0;v>r;r++)o=g[r],a=3*r,T[a]=o.x,T[a+1]=o.y,T[a+2]=o.z;if(R)for(n=0;y>n;n++)l=E[n],a=3*n,_[a]=l.r,_[a+1]=l.g,_[a+2]=l.b;if(w)for(c=0,h=w.length;h>c;c++)if(f=w[c],f.needsUpdate&&(void 0===f.boundTo||"vertices"===f.boundTo))if(d=f.value.length,a=0,1===f.size)for(u=0;d>u;u++)f.array[u]=f.value[u];else if(2===f.size)for(u=0;d>u;u++)p=f.value[u],f.array[a]=p.x,f.array[a+1]=p.y,a+=2;else if(3===f.size)if("c"===f.type)for(u=0;d>u;u++)p=f.value[u],f.array[a]=p.r,f.array[a+1]=p.g,f.array[a+2]=p.b,a+=3;else for(u=0;d>u;u++)p=f.value[u],f.array[a]=p.x,f.array[a+1]=p.y,f.array[a+2]=p.z,a+=3;else if(4===f.size)for(u=0;d>u;u++)p=f.value[u],f.array[a]=p.x,f.array[a+1]=p.y,f.array[a+2]=p.z,f.array[a+3]=p.w,a+=4}if((x||t.sortParticles)&&m.setDynamicArrayBuffer(e.__webglVertexBuffer,T),(R||t.sortParticles)&&m.setDynamicArrayBuffer(e.__webglColorBuffer,_),w)for(c=0,h=w.length;h>c;c++)f=w[c],(f.needsUpdate||t.sortParticles)&&m.setDynamicArrayBuffer(f.buffer,f.array)}}),THREE.WebGLRenderer.ParticleRenderer._m1=new THREE.Matrix4,THREE.WebGLRenderer.ParticleRenderer._v1=new THREE.Vector3;