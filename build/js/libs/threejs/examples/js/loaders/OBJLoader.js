THREE.OBJLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},THREE.OBJLoader.prototype={constructor:THREE.OBJLoader,load:function(e,t){var i=this,r=new THREE.XHRLoader(i.manager);r.setCrossOrigin(this.crossOrigin),r.load(e,function(e){t(i.parse(e))})},parse:function(e){function t(e,t,i){return new THREE.Vector3(e,t,i)}function i(e,t){return new THREE.Vector2(e,t)}function r(e,t,i,r){return new THREE.Face3(e,t,i,r)}function n(e,t,i,r,n){return new THREE.Face4(e,t,i,r,n)}function o(e,t){l.vertices.length>0&&(l.mergeVertices(),l.computeCentroids(),l.computeFaceNormals(),l.computeBoundingSphere(),s.add(c),l=new THREE.Geometry,c=new THREE.Mesh(l,h),d=0),void 0!==e&&(c.name=e),void 0!==t&&(h=new THREE.MeshLambertMaterial,h.name=t,c.material=h)}e=e.replace(/\ \\\r\n/g,"");for(var a=new THREE.Object3D,s=a,l=new THREE.Geometry,h=new THREE.MeshLambertMaterial,c=new THREE.Mesh(l,h),u=[],d=0,p=[],f=[],m=/v( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,g=/vn( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,v=/vt( +[\d|\.|\+|\-|e]+)( +[\d|\.|\+|\-|e]+)/,E=/f( +\d+)( +\d+)( +\d+)( +\d+)?/,y=/f( +(\d+)\/(\d+))( +(\d+)\/(\d+))( +(\d+)\/(\d+))( +(\d+)\/(\d+))?/,_=/f( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))( +(\d+)\/(\d+)\/(\d+))?/,T=/f( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))( +(\d+)\/\/(\d+))?/,b=e.split("\n"),x=0;x<b.length;x++){var w=b[x];w=w.trim();var R;0!==w.length&&"#"!==w.charAt(0)&&(null!==(R=m.exec(w))?u.push(t(parseFloat(R[1]),parseFloat(R[2]),parseFloat(R[3]))):null!==(R=g.exec(w))?p.push(t(parseFloat(R[1]),parseFloat(R[2]),parseFloat(R[3]))):null!==(R=v.exec(w))?f.push(i(parseFloat(R[1]),parseFloat(R[2]))):null!==(R=E.exec(w))?void 0===R[4]?(l.vertices.push(u[parseInt(R[1])-1],u[parseInt(R[2])-1],u[parseInt(R[3])-1]),l.faces.push(r(d++,d++,d++))):(l.vertices.push(u[parseInt(R[1])-1],u[parseInt(R[2])-1],u[parseInt(R[3])-1],u[parseInt(R[4])-1]),l.faces.push(n(d++,d++,d++,d++))):null!==(R=y.exec(w))?void 0===R[10]?(l.vertices.push(u[parseInt(R[2])-1],u[parseInt(R[5])-1],u[parseInt(R[8])-1]),l.faces.push(r(d++,d++,d++)),l.faceVertexUvs[0].push([f[parseInt(R[3])-1],f[parseInt(R[6])-1],f[parseInt(R[9])-1]])):(l.vertices.push(u[parseInt(R[2])-1],u[parseInt(R[5])-1],u[parseInt(R[8])-1],u[parseInt(R[11])-1]),l.faces.push(n(d++,d++,d++,d++)),l.faceVertexUvs[0].push([f[parseInt(R[3])-1],f[parseInt(R[6])-1],f[parseInt(R[9])-1],f[parseInt(R[12])-1]])):null!==(R=_.exec(w))?void 0===R[13]?(l.vertices.push(u[parseInt(R[2])-1],u[parseInt(R[6])-1],u[parseInt(R[10])-1]),l.faces.push(r(d++,d++,d++,[p[parseInt(R[4])-1],p[parseInt(R[8])-1],p[parseInt(R[12])-1]])),l.faceVertexUvs[0].push([f[parseInt(R[3])-1],f[parseInt(R[7])-1],f[parseInt(R[11])-1]])):(l.vertices.push(u[parseInt(R[2])-1],u[parseInt(R[6])-1],u[parseInt(R[10])-1],u[parseInt(R[14])-1]),l.faces.push(n(d++,d++,d++,d++,[p[parseInt(R[4])-1],p[parseInt(R[8])-1],p[parseInt(R[12])-1],p[parseInt(R[16])-1]])),l.faceVertexUvs[0].push([f[parseInt(R[3])-1],f[parseInt(R[7])-1],f[parseInt(R[11])-1],f[parseInt(R[15])-1]])):null!==(R=T.exec(w))?void 0===R[10]?(l.vertices.push(u[parseInt(R[2])-1],u[parseInt(R[5])-1],u[parseInt(R[8])-1]),l.faces.push(r(d++,d++,d++,[p[parseInt(R[3])-1],p[parseInt(R[6])-1],p[parseInt(R[9])-1]]))):(l.vertices.push(u[parseInt(R[2])-1],u[parseInt(R[5])-1],u[parseInt(R[8])-1],u[parseInt(R[11])-1]),l.faces.push(n(d++,d++,d++,d++,[p[parseInt(R[3])-1],p[parseInt(R[6])-1],p[parseInt(R[9])-1],p[parseInt(R[12])-1]]))):/^o /.test(w)?(s=new THREE.Object3D,s.name=w.substring(2).trim(),a.add(s)):/^g /.test(w)?o(w.substring(2).trim(),void 0):/^usemtl /.test(w)?o(void 0,w.substring(7).trim()):/^mtllib /.test(w)||/^s /.test(w))}return o(void 0,void 0),a}};