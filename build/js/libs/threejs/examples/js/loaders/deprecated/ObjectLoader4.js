THREE.ObjectLoader4=function(){},THREE.ObjectLoader4.prototype={constructor:THREE.ObjectLoader,load:function(e){var t=this,i=new XMLHttpRequest;i.addEventListener("load",function(e){var i=t.parse(JSON.parse(e.target.responseText));t.dispatchEvent({type:"load",content:i})},!1),i.addEventListener("progress",function(e){t.dispatchEvent({type:"progress",loaded:e.loaded,total:e.total})},!1),i.addEventListener("error",function(){t.dispatchEvent({type:"error",message:"Couldn't load URL ["+e+"]"})},!1),i.open("GET",e,!0),i.send(null)},parse:function(e){var t=this.parseGeometries(e.geometries),i=this.parseMaterials(e.materials),r=this.parseObject(e.object,t,i);return r},parseGeometries:function(e){var t=[];if(void 0!==e)for(var i=new THREE.JSONLoader,r=0,n=e.length;n>r;r++){var o,a=e[r];switch(a.type){case"PlaneGeometry":o=new THREE.PlaneGeometry(a.width,a.height,a.widthSegments,a.heightSegments);break;case"CubeGeometry":o=new THREE.CubeGeometry(a.width,a.height,a.depth,a.widthSegments,a.heightSegments,a.depthSegments);break;case"CylinderGeometry":o=new THREE.CylinderGeometry(a.radiusTop,a.radiusBottom,a.height,a.radiusSegments,a.heightSegments,a.openEnded);break;case"SphereGeometry":o=new THREE.SphereGeometry(a.radius,a.widthSegments,a.heightSegments,a.phiStart,a.phiLength,a.thetaStart,a.thetaLength);break;case"IcosahedronGeometry":o=new THREE.IcosahedronGeometry(a.radius,a.detail);break;case"TorusGeometry":o=new THREE.TorusGeometry(a.radius,a.tube,a.radialSegments,a.tubularSegments,a.arc);break;case"TorusKnotGeometry":o=new THREE.TorusKnotGeometry(a.radius,a.tube,a.radialSegments,a.tubularSegments,a.p,a.q,a.heightScale);break;case"Geometry":o=i.parse(a.data).geometry}void 0!==a.name&&(o.name=a.name),t.push(o)}return t},parseMaterials:function(e){var t=[];if(void 0!==e)for(var i=new THREE.MaterialLoader,r=0,n=e.length;n>r;r++){var o=e[r],a=i.parse(o);void 0!==o.name&&(a.name=o.name),t.push(a)}return t},parseObject:function(e,t,i){var r;switch(e.type){case"Scene":r=new THREE.Scene;break;case"PerspectiveCamera":r=new THREE.PerspectiveCamera(e.fov,e.aspect,e.near,e.far),r.position.fromArray(e.position),r.rotation.fromArray(e.rotation);break;case"OrthographicCamera":r=new THREE.OrthographicCamera(e.left,e.right,e.top,e.bottom,e.near,e.far),r.position.fromArray(e.position),r.rotation.fromArray(e.rotation);break;case"AmbientLight":r=new THREE.AmbientLight(e.color);break;case"DirectionalLight":r=new THREE.DirectionalLight(e.color,e.intensity),r.position.fromArray(e.position);break;case"PointLight":r=new THREE.PointLight(e.color,e.intensity,e.distance),r.position.fromArray(e.position);break;case"SpotLight":r=new THREE.SpotLight(e.color,e.intensity,e.distance,e.angle,e.exponent),r.position.fromArray(e.position);break;case"HemisphereLight":r=new THREE.HemisphereLight(e.color,e.groundColor,e.intensity),r.position.fromArray(e.position);break;case"Mesh":r=new THREE.Mesh(t[e.geometry],i[e.material]),r.position.fromArray(e.position),r.rotation.fromArray(e.rotation),r.scale.fromArray(e.scale);break;default:r=new THREE.Object3D,r.position.fromArray(e.position),r.rotation.fromArray(e.rotation),r.scale.fromArray(e.scale)}if(void 0!==e.name&&(r.name=e.name),void 0!==e.visible&&(r.visible=e.visible),void 0!==e.userData&&(r.userData=e.userData),void 0!==e.children)for(var n=0,o=e.children.length;o>n;n++)r.add(this.parseObject(e.children[n],t,i));return r}},THREE.EventDispatcher.prototype.apply(THREE.ObjectLoader4.prototype);