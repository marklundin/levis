THREE.PLYLoader=function(){},THREE.PLYLoader.prototype={constructor:THREE.PLYLoader,load:function(e,t){var i=this,r=new XMLHttpRequest;r.addEventListener("load",function(e){var r=i.parse(e.target.response);i.dispatchEvent({type:"load",content:r}),t&&t(r)},!1),r.addEventListener("progress",function(e){i.dispatchEvent({type:"progress",loaded:e.loaded,total:e.total})},!1),r.addEventListener("error",function(){i.dispatchEvent({type:"error",message:"Couldn't load URL ["+e+"]"})},!1),r.open("GET",e,!0),r.responseType="arraybuffer",r.send(null)},bin2str:function(e){for(var t=new Uint8Array(e),i="",r=0;r<e.byteLength;r++)i+=String.fromCharCode(t[r]);return i},isASCII:function(){return!0},parse:function(e){return e instanceof ArrayBuffer?this.isASCII(e)?this.parseASCII(this.bin2str(e)):this.parseBinary(e):this.parseASCII(e)},parseASCII:function(e){var t,i=new THREE.Geometry,r=/ply([\s\S]*)end_header/,n="";null!=(t=r.exec(e))&&(n=t[1]);var o=/end_header([\s\S]*)$/,a="";null!=(t=o.exec(e))&&(a=t[1]);var s=/element[\s]+vertex[\s]+(\d+)/g,l=0;null!=(t=s.exec(n))&&(l=parseInt(t[1]));var h=/element[\s]+face[\s]+(\d+)/g,c=0;if(null!=(t=h.exec(n))&&(c=parseInt(t[1])),0!=l&&0!=c){for(var u=/([-+]?[0-9]+\.?[0-9]*([eE][-+]?[0-9]+)?)+[\s]+([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)+[\s]+([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)+/g,d=0;l>d;d++){if(null==(t=u.exec(a)))return console.error("Vertex error: vertex count mismatch."),i;i.vertices.push(new THREE.Vector3(parseFloat(t[1]),parseFloat(t[3]),parseFloat(t[5])))}for(var p=/3[\s]+([-+]?[0-9]+)[\s]+([-+]?[0-9]+)[\s]+([-+]?[0-9]+)/g,d=0;c>d;d++){if(null==(t=p.exec(a)))return console.error("Face error: vertex count mismatch."),i;i.faces.push(new THREE.Face3(parseInt(t[1]),parseInt(t[2]),parseInt(t[3])))}}else console.error("Header error: vertexCount("+l+"), faceCount("+c+").");return i.computeCentroids(),i.computeBoundingSphere(),i},parseBinary:function(){console.error("Not supported yet.")}},THREE.EventDispatcher.prototype.apply(THREE.PLYLoader.prototype);