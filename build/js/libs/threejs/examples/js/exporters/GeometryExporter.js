THREE.GeometryExporter=function(){};THREE.GeometryExporter.prototype={constructor:THREE.GeometryExporter,parse:function(e){function t(e,t,i){return i?e|1<<t:e&~(1<<t)}function i(e){var t=e.x.toString()+e.y.toString()+e.z.toString();if(void 0!==u[t])return u[t];u[t]=c.length/3;c.push(e.x,e.y,e.z);return u[t]}function r(e){var t=e.r.toString()+e.g.toString()+e.b.toString();if(void 0!==d[t])return d[t];d[t]=f.length;f.push(e.getHex());return d[t]}function n(e){var t=e.x.toString()+e.y.toString();if(void 0!==m[t])return m[t];m[t]=p.length/2;p.push(e.x,e.y);return m[t]}var o={metadata:{version:4,type:"geometry",generator:"GeometryExporter"}};var a=[];for(var s=0;s<e.vertices.length;s++){var l=e.vertices[s];a.push(l.x,l.y,l.z)}var h=[];var c=[];var u={};var f=[];var d={};var p=[];var m={};for(var s=0;s<e.faces.length;s++){var v=e.faces[s];var g=v instanceof THREE.Face3;var E=!1;var y=!1;var T=e.faceVertexUvs[0].length>0;var _=v.normal.length()>0;var x=v.vertexNormals.length>0;var b=1!==v.color.r||1!==v.color.g||1!==v.color.b;var R=v.vertexColors.length>0;var w=0;w=t(w,0,!g);w=t(w,1,E);w=t(w,2,y);w=t(w,3,T);w=t(w,4,_);w=t(w,5,x);w=t(w,6,b);w=t(w,7,R);h.push(w);if(g)h.push(v.a,v.b,v.c);else h.push(v.a,v.b,v.c,v.d);if(T){var H=e.faceVertexUvs[0][s];if(g)h.push(n(H[0]),n(H[1]),n(H[2]));else h.push(n(H[0]),n(H[1]),n(H[2]),n(H[3]))}if(_)h.push(i(v.normal));if(x){var S=v.vertexNormals;if(g)h.push(i(S[0]),i(S[1]),i(S[2]));else h.push(i(S[0]),i(S[1]),i(S[2]),i(S[3]))}if(b)h.push(r(v.color));if(R){var M=v.vertexColors;if(g)h.push(r(M[0]),r(M[1]),r(M[2]));else h.push(r(M[0]),r(M[1]),r(M[2]),r(M[3]))}}o.vertices=a;o.normals=c;if(f.length>0)o.colors=f;if(p.length>0)o.uvs=[p];o.faces=h;return o}};