THREE.ObjectExporter=function(){};THREE.ObjectExporter.prototype={constructor:THREE.ObjectExporter,parse:function(e){var t={metadata:{version:4.3,type:"object",generator:"ObjectExporter"}};var i={};var r=new THREE.GeometryExporter;var n=function(e){if(void 0===t.geometries)t.geometries=[];if(void 0===i[e.uuid]){var n={};n.uuid=e.uuid;if(""!==e.name)n.name=e.name;if(e instanceof THREE.PlaneGeometry){n.type="PlaneGeometry";n.width=e.width;n.height=e.height;n.widthSegments=e.widthSegments;n.heightSegments=e.heightSegments}else if(e instanceof THREE.CubeGeometry){n.type="CubeGeometry";n.width=e.width;n.height=e.height;n.depth=e.depth;n.widthSegments=e.widthSegments;n.heightSegments=e.heightSegments;n.depthSegments=e.depthSegments}else if(e instanceof THREE.CylinderGeometry){n.type="CylinderGeometry";n.radiusTop=e.radiusTop;n.radiusBottom=e.radiusBottom;n.height=e.height;n.radiusSegments=e.radiusSegments;n.heightSegments=e.heightSegments;n.openEnded=n.openEnded}else if(e instanceof THREE.SphereGeometry){n.type="SphereGeometry";n.radius=e.radius;n.widthSegments=e.widthSegments;n.heightSegments=e.heightSegments;n.phiStart=e.phiStart;n.phiLength=e.phiLength;n.thetaStart=e.thetaStart;n.thetaLength=e.thetaLength}else if(e instanceof THREE.IcosahedronGeometry){n.type="IcosahedronGeometry";n.radius=e.radius;n.detail=e.detail}else if(e instanceof THREE.TorusGeometry){n.type="TorusGeometry";n.radius=e.radius;n.tube=e.tube;n.radialSegments=e.radialSegments;n.tubularSegments=e.tubularSegments;n.arc=e.arc}else if(e instanceof THREE.TorusKnotGeometry){n.type="TorusKnotGeometry";n.radius=e.radius;n.tube=e.tube;n.radialSegments=e.radialSegments;n.tubularSegments=e.tubularSegments;n.p=e.p;n.q=e.q;n.heightScale=e.heightScale}else if(e instanceof THREE.Geometry){n.type="Geometry";n.data=r.parse(e);delete n.data.metadata}i[e.uuid]=n;t.geometries.push(n)}return e.uuid};var o={};var a=new THREE.MaterialExporter;var s=function(e){if(void 0===t.materials)t.materials=[];if(void 0===o[e.uuid]){var i=a.parse(e);delete i.metadata;o[e.uuid]=i;t.materials.push(i)}return e.uuid};var l=function(e){var t={};t.uuid=e.uuid;if(""!==e.name)t.name=e.name;if("{}"!==JSON.stringify(e.userData))t.userData=e.userData;if(e.visible!==!0)t.visible=e.visible;if(e instanceof THREE.Scene)t.type="Scene";else if(e instanceof THREE.PerspectiveCamera){t.type="PerspectiveCamera";t.fov=e.fov;t.aspect=e.aspect;t.near=e.near;t.far=e.far}else if(e instanceof THREE.OrthographicCamera){t.type="OrthographicCamera";t.left=e.left;t.right=e.right;t.top=e.top;t.bottom=e.bottom;t.near=e.near;t.far=e.far}else if(e instanceof THREE.AmbientLight){t.type="AmbientLight";t.color=e.color.getHex()}else if(e instanceof THREE.DirectionalLight){t.type="DirectionalLight";t.color=e.color.getHex();t.intensity=e.intensity}else if(e instanceof THREE.PointLight){t.type="PointLight";t.color=e.color.getHex();t.intensity=e.intensity;t.distance=e.distance}else if(e instanceof THREE.SpotLight){t.type="SpotLight";t.color=e.color.getHex();t.intensity=e.intensity;t.distance=e.distance;t.angle=e.angle;t.exponent=e.exponent}else if(e instanceof THREE.HemisphereLight){t.type="HemisphereLight";t.color=e.color.getHex();t.groundColor=e.groundColor.getHex()}else if(e instanceof THREE.Mesh){t.type="Mesh";t.geometry=n(e.geometry);t.material=s(e.material)}else t.type="Object3D";t.matrix=e.matrix.toArray();if(e.children.length>0){t.children=[];for(var i=0;i<e.children.length;i++)t.children.push(l(e.children[i]))}return t};t.object=l(e);return t}};